{"dependencies":[{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"],"imports":1}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"],"imports":1}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"HOUR_BLOCK_HEIGHT\", {\n    enumerable: true,\n    get: function () {\n      return HOUR_BLOCK_HEIGHT;\n    }\n  });\n  exports.populateEvents = populateEvents;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  var _lodashInRange = require(_dependencyMap[0], \"lodash/inRange\");\n  var inRange = _interopDefault(_lodashInRange);\n  var _xdate = require(_dependencyMap[1], \"xdate\");\n  var XDate = _interopDefault(_xdate);\n  var _commonsConstants = require(_dependencyMap[2], \"../commons/constants\");\n  var constants = _interopDefault(_commonsConstants);\n  var HOUR_BLOCK_HEIGHT = 100;\n  var OVERLAP_EVENTS_SPACINGS = 10;\n  var RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, _ref) {\n    var _ref$dayStart = _ref.dayStart,\n      dayStart = _ref$dayStart === void 0 ? 0 : _ref$dayStart,\n      _ref$hourBlockHeight = _ref.hourBlockHeight,\n      hourBlockHeight = _ref$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref$hourBlockHeight;\n    var startTime = new XDate.default(event.start);\n    var endTime = event.end ? new XDate.default(event.end) : new XDate.default(startTime).addHours(1);\n    var dayStartTime = new XDate.default(startTime).clearTime();\n    return {\n      ...event,\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    };\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    var colSpan = 1;\n    for (var i = columnIndex + 1; i < columns.length; i++) {\n      var column = columns[i];\n      var foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    var _populateOptions$scre = populateOptions.screenWidth,\n      screenWidth = _populateOptions$scre === void 0 ? constants.default.screenWidth : _populateOptions$scre,\n      _populateOptions$righ = populateOptions.rightEdgeSpacing,\n      rightEdgeSpacing = _populateOptions$righ === void 0 ? RIGHT_EDGE_SPACING : _populateOptions$righ,\n      _populateOptions$over = populateOptions.overlapEventsSpacing,\n      overlapEventsSpacing = _populateOptions$over === void 0 ? OVERLAP_EVENTS_SPACINGS : _populateOptions$over;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        var totalWidth = screenWidth - rightEdgeSpacing;\n        var columnSpan = calcColumnSpan(event, columnIndex, columns);\n        var eventLeft = columnIndex / columns.length * totalWidth;\n        var eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    var lastEnd = null;\n    var columns = [];\n    var calculatedEvents = [];\n    var events = _events.map((ev, index) => ({\n      ...ev,\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n      // Place current event in the right column where it doesn't overlap\n      var placed = false;\n      for (var i = 0; i < columns.length; i++) {\n        var col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks() {\n    var unavailableHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n    var _ref2 = options || {},\n      _ref2$hourBlockHeight = _ref2.hourBlockHeight,\n      hourBlockHeight = _ref2$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref2$hourBlockHeight,\n      _ref2$dayStart = _ref2.dayStart,\n      dayStart = _ref2$dayStart === void 0 ? 0 : _ref2$dayStart,\n      _ref2$dayEnd = _ref2.dayEnd,\n      dayEnd = _ref2$dayEnd === void 0 ? 24 : _ref2$dayEnd;\n    var totalDayHours = dayEnd - dayStart;\n    var totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, inRange.default)(hours.start, 0, 25) || !(0, inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      var startFixed = Math.max(hours.start, dayStart);\n      var endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":155,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"HOUR_BLOCK_HEIGHT"],[15,30,4,0],[16,4,4,0],[17,2,4,0],[18,2,49,0,"exports"],[18,9,49,0],[18,10,49,0,"populateEvents"],[18,24,49,0],[18,27,49,0,"populateEvents"],[18,41,49,0],[19,2,96,0,"exports"],[19,9,96,0],[19,10,96,0,"buildUnavailableHoursBlocks"],[19,37,96,0],[19,40,96,0,"buildUnavailableHoursBlocks"],[19,67,96,0],[20,2,1,0],[20,6,1,0,"_lodashInRange"],[20,20,1,0],[20,23,1,0,"require"],[20,30,1,0],[20,31,1,0,"_dependencyMap"],[20,45,1,0],[21,2,1,0],[21,6,1,0,"inRange"],[21,13,1,0],[21,16,1,0,"_interopDefault"],[21,31,1,0],[21,32,1,0,"_lodashInRange"],[21,46,1,0],[22,2,2,0],[22,6,2,0,"_xdate"],[22,12,2,0],[22,15,2,0,"require"],[22,22,2,0],[22,23,2,0,"_dependencyMap"],[22,37,2,0],[23,2,2,0],[23,6,2,0,"XDate"],[23,11,2,0],[23,14,2,0,"_interopDefault"],[23,29,2,0],[23,30,2,0,"_xdate"],[23,36,2,0],[24,2,3,0],[24,6,3,0,"_commonsConstants"],[24,23,3,0],[24,26,3,0,"require"],[24,33,3,0],[24,34,3,0,"_dependencyMap"],[24,48,3,0],[25,2,3,0],[25,6,3,0,"constants"],[25,15,3,0],[25,18,3,0,"_interopDefault"],[25,33,3,0],[25,34,3,0,"_commonsConstants"],[25,51,3,0],[26,2,4,7],[26,6,4,13,"HOUR_BLOCK_HEIGHT"],[26,23,4,30],[26,26,4,33],[26,29,4,36],[27,2,5,0],[27,6,5,6,"OVERLAP_EVENTS_SPACINGS"],[27,29,5,29],[27,32,5,32],[27,34,5,34],[28,2,6,0],[28,6,6,6,"RIGHT_EDGE_SPACING"],[28,24,6,24],[28,27,6,27],[28,29,6,29],[29,2,7,0],[29,11,7,9,"buildEvent"],[29,21,7,19,"buildEvent"],[29,22,7,20,"event"],[29,27,7,25],[29,29,7,27,"left"],[29,33,7,31],[29,35,7,33,"width"],[29,40,7,38],[29,42,7,38,"_ref"],[29,46,7,38],[29,48,7,95],[30,4,7,95],[30,8,7,95,"_ref$dayStart"],[30,21,7,95],[30,24,7,95,"_ref"],[30,28,7,95],[30,29,7,42,"dayStart"],[30,37,7,50],[31,6,7,42,"dayStart"],[31,14,7,50],[31,17,7,50,"_ref$dayStart"],[31,30,7,50],[31,44,7,53],[31,45,7,54],[31,48,7,54,"_ref$dayStart"],[31,61,7,54],[32,6,7,54,"_ref$hourBlockHeight"],[32,26,7,54],[32,29,7,54,"_ref"],[32,33,7,54],[32,34,7,56,"hourBlockHeight"],[32,49,7,71],[33,6,7,56,"hourBlockHeight"],[33,21,7,71],[33,24,7,71,"_ref$hourBlockHeight"],[33,44,7,71],[33,58,7,74,"HOUR_BLOCK_HEIGHT"],[33,75,7,91],[33,78,7,91,"_ref$hourBlockHeight"],[33,98,7,91],[34,4,8,4],[34,8,8,10,"startTime"],[34,17,8,19],[34,20,8,22],[34,24,8,26,"XDate"],[34,29,8,31],[34,30,8,31,"default"],[34,37,8,31],[34,38,8,32,"event"],[34,43,8,37],[34,44,8,38,"start"],[34,49,8,43],[34,50,8,44],[35,4,9,4],[35,8,9,10,"endTime"],[35,15,9,17],[35,18,9,20,"event"],[35,23,9,25],[35,24,9,26,"end"],[35,27,9,29],[35,30,9,32],[35,34,9,36,"XDate"],[35,39,9,41],[35,40,9,41,"default"],[35,47,9,41],[35,48,9,42,"event"],[35,53,9,47],[35,54,9,48,"end"],[35,57,9,51],[35,58,9,52],[35,61,9,55],[35,65,9,59,"XDate"],[35,70,9,64],[35,71,9,64,"default"],[35,78,9,64],[35,79,9,65,"startTime"],[35,88,9,74],[35,89,9,75],[35,90,9,76,"addHours"],[35,98,9,84],[35,99,9,85],[35,100,9,86],[35,101,9,87],[36,4,10,4],[36,8,10,10,"dayStartTime"],[36,20,10,22],[36,23,10,25],[36,27,10,29,"XDate"],[36,32,10,34],[36,33,10,34,"default"],[36,40,10,34],[36,41,10,35,"startTime"],[36,50,10,44],[36,51,10,45],[36,52,10,46,"clearTime"],[36,61,10,55],[36,62,10,56],[36,63,10,57],[37,4,11,4],[37,11,11,11],[38,6,12,8],[38,9,12,11,"event"],[38,14,12,16],[39,6,13,8,"top"],[39,9,13,11],[39,11,13,13],[39,12,13,14,"dayStartTime"],[39,24,13,26],[39,25,13,27,"diffHours"],[39,34,13,36],[39,35,13,37,"startTime"],[39,44,13,46],[39,45,13,47],[39,48,13,50,"dayStart"],[39,56,13,58],[39,60,13,62,"hourBlockHeight"],[39,75,13,77],[40,6,14,8,"height"],[40,12,14,14],[40,14,14,16,"startTime"],[40,23,14,25],[40,24,14,26,"diffHours"],[40,33,14,35],[40,34,14,36,"endTime"],[40,41,14,43],[40,42,14,44],[40,45,14,47,"hourBlockHeight"],[40,60,14,62],[41,6,15,8,"width"],[41,11,15,13],[42,6,16,8,"left"],[43,4,17,4],[43,5,17,5],[44,2,18,0],[45,2,19,0],[45,11,19,9,"hasCollision"],[45,23,19,21,"hasCollision"],[45,24,19,22,"a"],[45,25,19,23],[45,27,19,25,"b"],[45,28,19,26],[45,30,19,28],[46,4,20,4],[46,11,20,11,"a"],[46,12,20,12],[46,13,20,13,"end"],[46,16,20,16],[46,19,20,19,"b"],[46,20,20,20],[46,21,20,21,"start"],[46,26,20,26],[46,30,20,30,"a"],[46,31,20,31],[46,32,20,32,"start"],[46,37,20,37],[46,40,20,40,"b"],[46,41,20,41],[46,42,20,42,"end"],[46,45,20,45],[47,2,21,0],[48,2,22,0],[48,11,22,9,"calcColumnSpan"],[48,25,22,23,"calcColumnSpan"],[48,26,22,24,"event"],[48,31,22,29],[48,33,22,31,"columnIndex"],[48,44,22,42],[48,46,22,44,"columns"],[48,53,22,51],[48,55,22,53],[49,4,23,4],[49,8,23,8,"colSpan"],[49,15,23,15],[49,18,23,18],[49,19,23,19],[50,4,24,4],[50,9,24,9],[50,13,24,13,"i"],[50,14,24,14],[50,17,24,17,"columnIndex"],[50,28,24,28],[50,31,24,31],[50,32,24,32],[50,34,24,34,"i"],[50,35,24,35],[50,38,24,38,"columns"],[50,45,24,45],[50,46,24,46,"length"],[50,52,24,52],[50,54,24,54,"i"],[50,55,24,55],[50,57,24,57],[50,59,24,59],[51,6,25,8],[51,10,25,14,"column"],[51,16,25,20],[51,19,25,23,"columns"],[51,26,25,30],[51,27,25,31,"i"],[51,28,25,32],[51,29,25,33],[52,6,26,8],[52,10,26,14,"foundCollision"],[52,24,26,28],[52,27,26,31,"column"],[52,33,26,37],[52,34,26,38,"find"],[52,38,26,42],[52,39,26,43,"ev"],[52,41,26,45],[52,45,26,49,"hasCollision"],[52,57,26,61],[52,58,26,62,"event"],[52,63,26,67],[52,65,26,69,"ev"],[52,67,26,71],[52,68,26,72],[52,69,26,73],[53,6,27,8],[53,10,27,12,"foundCollision"],[53,24,27,26],[53,26,27,28],[54,8,28,12],[54,15,28,19,"colSpan"],[54,22,28,26],[55,6,29,8],[56,6,30,8,"colSpan"],[56,13,30,15],[56,15,30,17],[57,4,31,4],[58,4,32,4],[58,11,32,11,"colSpan"],[58,18,32,18],[59,2,33,0],[60,2,34,0],[60,11,34,9,"packOverlappingEventGroup"],[60,36,34,34,"packOverlappingEventGroup"],[60,37,34,35,"columns"],[60,44,34,42],[60,46,34,44,"calculatedEvents"],[60,62,34,60],[60,64,34,62,"populateOptions"],[60,79,34,77],[60,81,34,79],[61,4,35,4],[61,8,35,4,"_populateOptions$scre"],[61,29,35,4],[61,32,35,139,"populateOptions"],[61,47,35,154],[61,48,35,12,"screenWidth"],[61,59,35,23],[62,6,35,12,"screenWidth"],[62,17,35,23],[62,20,35,23,"_populateOptions$scre"],[62,41,35,23],[62,55,35,26,"constants"],[62,64,35,35],[62,65,35,35,"default"],[62,72,35,35],[62,73,35,36,"screenWidth"],[62,84,35,47],[62,87,35,47,"_populateOptions$scre"],[62,108,35,47],[63,6,35,47,"_populateOptions$righ"],[63,27,35,47],[63,30,35,139,"populateOptions"],[63,45,35,154],[63,46,35,49,"rightEdgeSpacing"],[63,62,35,65],[64,6,35,49,"rightEdgeSpacing"],[64,22,35,65],[64,25,35,65,"_populateOptions$righ"],[64,46,35,65],[64,60,35,68,"RIGHT_EDGE_SPACING"],[64,78,35,86],[64,81,35,86,"_populateOptions$righ"],[64,102,35,86],[65,6,35,86,"_populateOptions$over"],[65,27,35,86],[65,30,35,139,"populateOptions"],[65,45,35,154],[65,46,35,88,"overlapEventsSpacing"],[65,66,35,108],[66,6,35,88,"overlapEventsSpacing"],[66,26,35,108],[66,29,35,108,"_populateOptions$over"],[66,50,35,108],[66,64,35,111,"OVERLAP_EVENTS_SPACINGS"],[66,87,35,134],[66,90,35,134,"_populateOptions$over"],[66,111,35,134],[67,4,36,4,"columns"],[67,11,36,11],[67,12,36,12,"forEach"],[67,19,36,19],[67,20,36,20],[67,21,36,21,"column"],[67,27,36,27],[67,29,36,29,"columnIndex"],[67,40,36,40],[67,45,36,45],[68,6,37,8,"column"],[68,12,37,14],[68,13,37,15,"forEach"],[68,20,37,22],[68,21,37,23,"event"],[68,26,37,28],[68,30,37,32],[69,8,38,12],[69,12,38,18,"totalWidth"],[69,22,38,28],[69,25,38,31,"screenWidth"],[69,36,38,42],[69,39,38,45,"rightEdgeSpacing"],[69,55,38,61],[70,8,39,12],[70,12,39,18,"columnSpan"],[70,22,39,28],[70,25,39,31,"calcColumnSpan"],[70,39,39,45],[70,40,39,46,"event"],[70,45,39,51],[70,47,39,53,"columnIndex"],[70,58,39,64],[70,60,39,66,"columns"],[70,67,39,73],[70,68,39,74],[71,8,40,12],[71,12,40,18,"eventLeft"],[71,21,40,27],[71,24,40,31,"columnIndex"],[71,35,40,42],[71,38,40,45,"columns"],[71,45,40,52],[71,46,40,53,"length"],[71,52,40,59],[71,55,40,63,"totalWidth"],[71,65,40,73],[72,8,41,12],[72,12,41,16,"eventWidth"],[72,22,41,26],[72,25,41,29,"totalWidth"],[72,35,41,39],[72,39,41,43,"columnSpan"],[72,49,41,53],[72,52,41,56,"columns"],[72,59,41,63],[72,60,41,64,"length"],[72,66,41,70],[72,67,41,71],[73,8,42,12],[73,12,42,16,"columnIndex"],[73,23,42,27],[73,26,42,30,"columnSpan"],[73,36,42,40],[73,40,42,44,"columns"],[73,47,42,51],[73,48,42,52,"length"],[73,54,42,58],[73,57,42,61],[73,58,42,62],[73,60,42,64],[74,10,43,16,"eventWidth"],[74,20,43,26],[74,24,43,30,"overlapEventsSpacing"],[74,44,43,50],[75,8,44,12],[76,8,45,12,"calculatedEvents"],[76,24,45,28],[76,25,45,29,"push"],[76,29,45,33],[76,30,45,34,"buildEvent"],[76,40,45,44],[76,41,45,45,"event"],[76,46,45,50],[76,48,45,52,"eventLeft"],[76,57,45,61],[76,59,45,63,"eventWidth"],[76,69,45,73],[76,71,45,75,"populateOptions"],[76,86,45,90],[76,87,45,91],[76,88,45,92],[77,6,46,8],[77,7,46,9],[77,8,46,10],[78,4,47,4],[78,5,47,5],[78,6,47,6],[79,2,48,0],[80,2,49,7],[80,11,49,16,"populateEvents"],[80,25,49,30,"populateEvents"],[80,26,49,31,"_events"],[80,33,49,38],[80,35,49,40,"populateOptions"],[80,50,49,55],[80,52,49,57],[81,4,50,4],[81,8,50,8,"lastEnd"],[81,15,50,15],[81,18,50,18],[81,22,50,22],[82,4,51,4],[82,8,51,8,"columns"],[82,15,51,15],[82,18,51,18],[82,20,51,20],[83,4,52,4],[83,8,52,10,"calculatedEvents"],[83,24,52,26],[83,27,52,29],[83,29,52,31],[84,4,53,4],[84,8,53,10,"events"],[84,14,53,16],[84,17,53,19,"_events"],[84,24,53,26],[84,25,54,9,"map"],[84,28,54,12],[84,29,54,13],[84,30,54,14,"ev"],[84,32,54,16],[84,34,54,18,"index"],[84,39,54,23],[84,45,54,29],[85,6,54,31],[85,9,54,34,"ev"],[85,11,54,36],[86,6,54,38,"index"],[86,11,54,43],[86,13,54,45,"index"],[87,4,54,51],[87,5,54,52],[87,6,54,53],[87,7,54,54],[87,8,55,9,"sort"],[87,12,55,13],[87,13,55,14],[87,23,55,24,"a"],[87,24,55,25],[87,26,55,27,"b"],[87,27,55,28],[87,29,55,30],[88,6,56,8],[88,10,56,12,"a"],[88,11,56,13],[88,12,56,14,"start"],[88,17,56,19],[88,20,56,22,"b"],[88,21,56,23],[88,22,56,24,"start"],[88,27,56,29],[88,29,57,12],[88,36,57,19],[88,37,57,20],[88,38,57,21],[89,6,58,8],[89,10,58,12,"a"],[89,11,58,13],[89,12,58,14,"start"],[89,17,58,19],[89,20,58,22,"b"],[89,21,58,23],[89,22,58,24,"start"],[89,27,58,29],[89,29,59,12],[89,36,59,19],[89,37,59,20],[90,6,60,8],[90,10,60,12,"a"],[90,11,60,13],[90,12,60,14,"end"],[90,15,60,17],[90,18,60,20,"b"],[90,19,60,21],[90,20,60,22,"end"],[90,23,60,25],[90,25,61,12],[90,32,61,19],[90,33,61,20],[90,34,61,21],[91,6,62,8],[91,10,62,12,"a"],[91,11,62,13],[91,12,62,14,"end"],[91,15,62,17],[91,18,62,20,"b"],[91,19,62,21],[91,20,62,22,"end"],[91,23,62,25],[91,25,63,12],[91,32,63,19],[91,33,63,20],[92,6,64,8],[92,13,64,15],[92,14,64,16],[93,4,65,4],[93,5,65,5],[93,6,65,6],[94,4,66,4,"events"],[94,10,66,10],[94,11,66,11,"forEach"],[94,18,66,18],[94,19,66,19],[94,29,66,29,"ev"],[94,31,66,31],[94,33,66,33],[95,6,67,8],[96,6,68,8],[96,10,68,12,"lastEnd"],[96,17,68,19],[96,22,68,24],[96,26,68,28],[96,30,68,32,"ev"],[96,32,68,34],[96,33,68,35,"start"],[96,38,68,40],[96,42,68,44,"lastEnd"],[96,49,68,51],[96,51,68,53],[97,8,69,12,"packOverlappingEventGroup"],[97,33,69,37],[97,34,69,38,"columns"],[97,41,69,45],[97,43,69,47,"calculatedEvents"],[97,59,69,63],[97,61,69,65,"populateOptions"],[97,76,69,80],[97,77,69,81],[98,8,70,12,"columns"],[98,15,70,19],[98,18,70,22],[98,20,70,24],[99,8,71,12,"lastEnd"],[99,15,71,19],[99,18,71,22],[99,22,71,26],[100,6,72,8],[101,6,73,8],[102,6,74,8],[102,10,74,12,"placed"],[102,16,74,18],[102,19,74,21],[102,24,74,26],[103,6,75,8],[103,11,75,13],[103,15,75,17,"i"],[103,16,75,18],[103,19,75,21],[103,20,75,22],[103,22,75,24,"i"],[103,23,75,25],[103,26,75,28,"columns"],[103,33,75,35],[103,34,75,36,"length"],[103,40,75,42],[103,42,75,44,"i"],[103,43,75,45],[103,45,75,47],[103,47,75,49],[104,8,76,12],[104,12,76,18,"col"],[104,15,76,21],[104,18,76,24,"columns"],[104,25,76,31],[104,26,76,32,"i"],[104,27,76,33],[104,28,76,34],[105,8,77,12],[105,12,77,16],[105,13,77,17,"hasCollision"],[105,25,77,29],[105,26,77,30,"col"],[105,29,77,33],[105,30,77,34,"col"],[105,33,77,37],[105,34,77,38,"length"],[105,40,77,44],[105,43,77,47],[105,44,77,48],[105,45,77,49],[105,47,77,51,"ev"],[105,49,77,53],[105,50,77,54],[105,52,77,56],[106,10,78,16,"col"],[106,13,78,19],[106,14,78,20,"push"],[106,18,78,24],[106,19,78,25,"ev"],[106,21,78,27],[106,22,78,28],[107,10,79,16,"placed"],[107,16,79,22],[107,19,79,25],[107,23,79,29],[108,10,80,16],[109,8,81,12],[110,6,82,8],[111,6,83,8],[112,6,84,8],[112,10,84,12],[112,11,84,13,"placed"],[112,17,84,19],[112,19,84,21],[113,8,85,12,"columns"],[113,15,85,19],[113,16,85,20,"push"],[113,20,85,24],[113,21,85,25],[113,22,85,26,"ev"],[113,24,85,28],[113,25,85,29],[113,26,85,30],[114,6,86,8],[115,6,87,8],[115,10,87,12,"lastEnd"],[115,17,87,19],[115,22,87,24],[115,26,87,28],[115,30,87,32,"ev"],[115,32,87,34],[115,33,87,35,"end"],[115,36,87,38],[115,39,87,41,"lastEnd"],[115,46,87,48],[115,48,87,50],[116,8,88,12,"lastEnd"],[116,15,88,19],[116,18,88,22,"ev"],[116,20,88,24],[116,21,88,25,"end"],[116,24,88,28],[117,6,89,8],[118,4,90,4],[118,5,90,5],[118,6,90,6],[119,4,91,4],[119,8,91,8,"columns"],[119,15,91,15],[119,16,91,16,"length"],[119,22,91,22],[119,25,91,25],[119,26,91,26],[119,28,91,28],[120,6,92,8,"packOverlappingEventGroup"],[120,31,92,33],[120,32,92,34,"columns"],[120,39,92,41],[120,41,92,43,"calculatedEvents"],[120,57,92,59],[120,59,92,61,"populateOptions"],[120,74,92,76],[120,75,92,77],[121,4,93,4],[122,4,94,4],[122,11,94,11,"calculatedEvents"],[122,27,94,27],[123,2,95,0],[124,2,96,7],[124,11,96,16,"buildUnavailableHoursBlocks"],[124,38,96,43,"buildUnavailableHoursBlocks"],[124,39,96,43],[124,41,96,76],[125,4,96,76],[125,8,96,44,"unavailableHours"],[125,24,96,60],[125,27,96,60,"arguments"],[125,36,96,60],[125,37,96,60,"length"],[125,43,96,60],[125,51,96,60,"arguments"],[125,60,96,60],[125,68,96,60,"undefined"],[125,77,96,60],[125,80,96,60,"arguments"],[125,89,96,60],[125,95,96,63],[125,97,96,65],[126,4,96,65],[126,8,96,67,"options"],[126,15,96,74],[126,18,96,74,"arguments"],[126,27,96,74],[126,28,96,74,"length"],[126,34,96,74],[126,41,96,74,"arguments"],[126,50,96,74],[126,56,96,74,"undefined"],[126,65,96,74],[127,4,97,4],[127,8,97,4,"_ref2"],[127,13,97,4],[127,16,97,79,"options"],[127,23,97,86],[127,27,97,90],[127,28,97,91],[127,29,97,92],[128,6,97,92,"_ref2$hourBlockHeight"],[128,27,97,92],[128,30,97,92,"_ref2"],[128,35,97,92],[128,36,97,12,"hourBlockHeight"],[128,51,97,27],[129,6,97,12,"hourBlockHeight"],[129,21,97,27],[129,24,97,27,"_ref2$hourBlockHeight"],[129,45,97,27],[129,59,97,30,"HOUR_BLOCK_HEIGHT"],[129,76,97,47],[129,79,97,47,"_ref2$hourBlockHeight"],[129,100,97,47],[130,6,97,47,"_ref2$dayStart"],[130,20,97,47],[130,23,97,47,"_ref2"],[130,28,97,47],[130,29,97,49,"dayStart"],[130,37,97,57],[131,6,97,49,"dayStart"],[131,14,97,57],[131,17,97,57,"_ref2$dayStart"],[131,31,97,57],[131,45,97,60],[131,46,97,61],[131,49,97,61,"_ref2$dayStart"],[131,63,97,61],[132,6,97,61,"_ref2$dayEnd"],[132,18,97,61],[132,21,97,61,"_ref2"],[132,26,97,61],[132,27,97,63,"dayEnd"],[132,33,97,69],[133,6,97,63,"dayEnd"],[133,12,97,69],[133,15,97,69,"_ref2$dayEnd"],[133,27,97,69],[133,41,97,72],[133,43,97,74],[133,46,97,74,"_ref2$dayEnd"],[133,58,97,74],[134,4,98,4],[134,8,98,10,"totalDayHours"],[134,21,98,23],[134,24,98,26,"dayEnd"],[134,30,98,32],[134,33,98,35,"dayStart"],[134,41,98,43],[135,4,99,4],[135,8,99,10,"totalDayHeight"],[135,22,99,24],[135,25,99,27],[135,26,99,28,"dayEnd"],[135,32,99,34],[135,35,99,37,"dayStart"],[135,43,99,45],[135,47,99,49,"hourBlockHeight"],[135,62,99,64],[136,4,100,4],[136,11,100,12,"unavailableHours"],[136,27,100,28],[136,28,101,9,"map"],[136,31,101,12],[136,32,101,13,"hours"],[136,37,101,18],[136,41,101,22],[137,6,102,8],[137,10,102,12],[137,11,102,13],[137,15,102,13,"inRange"],[137,22,102,20],[137,23,102,20,"default"],[137,30,102,20],[137,32,102,21,"hours"],[137,37,102,26],[137,38,102,27,"start"],[137,43,102,32],[137,45,102,34],[137,46,102,35],[137,48,102,37],[137,50,102,39],[137,51,102,40],[137,55,102,44],[137,56,102,45],[137,60,102,45,"inRange"],[137,67,102,52],[137,68,102,52,"default"],[137,75,102,52],[137,77,102,53,"hours"],[137,82,102,58],[137,83,102,59,"end"],[137,86,102,62],[137,88,102,64],[137,89,102,65],[137,91,102,67],[137,93,102,69],[137,94,102,70],[137,96,102,72],[138,8,103,12,"console"],[138,15,103,19],[138,16,103,20,"error"],[138,21,103,25],[138,22,103,26],[138,103,103,107],[138,104,103,108],[139,8,104,12],[139,15,104,19,"undefined"],[139,24,104,28],[140,6,105,8],[141,6,106,8],[141,10,106,12,"hours"],[141,15,106,17],[141,16,106,18,"start"],[141,21,106,23],[141,25,106,27,"hours"],[141,30,106,32],[141,31,106,33,"end"],[141,34,106,36],[141,36,106,38],[142,8,107,12,"console"],[142,15,107,19],[142,16,107,20,"error"],[142,21,107,25],[142,22,107,26],[142,111,107,115],[142,112,107,116],[143,8,108,12],[143,15,108,19,"undefined"],[143,24,108,28],[144,6,109,8],[145,6,110,8],[145,10,110,14,"startFixed"],[145,20,110,24],[145,23,110,27,"Math"],[145,27,110,31],[145,28,110,32,"max"],[145,31,110,35],[145,32,110,36,"hours"],[145,37,110,41],[145,38,110,42,"start"],[145,43,110,47],[145,45,110,49,"dayStart"],[145,53,110,57],[145,54,110,58],[146,6,111,8],[146,10,111,14,"endFixed"],[146,18,111,22],[146,21,111,25,"Math"],[146,25,111,29],[146,26,111,30,"min"],[146,29,111,33],[146,30,111,34,"hours"],[146,35,111,39],[146,36,111,40,"end"],[146,39,111,43],[146,41,111,45,"dayEnd"],[146,47,111,51],[146,48,111,52],[147,6,112,8],[147,13,112,15],[148,8,113,12,"top"],[148,11,113,15],[148,13,113,18],[148,14,113,19,"startFixed"],[148,24,113,29],[148,27,113,32,"dayStart"],[148,35,113,40],[148,39,113,44,"totalDayHours"],[148,52,113,57],[148,55,113,61,"totalDayHeight"],[148,69,113,75],[149,8,114,12,"height"],[149,14,114,18],[149,16,114,20],[149,17,114,21,"endFixed"],[149,25,114,29],[149,28,114,32,"startFixed"],[149,38,114,42],[149,42,114,46,"hourBlockHeight"],[150,6,115,8],[150,7,115,9],[151,4,116,4],[151,5,116,5],[152,4,117,8],[153,4,117,8],[153,5,118,9,"filter"],[153,11,118,15],[153,12,118,16,"Boolean"],[153,19,118,23],[153,20,118,24],[154,2,119,0],[155,0,119,1],[155,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;ACM;CDW;AEC;CFE;AGC;2CCI,6BD;CHO;AKC;oBCE;uBCC;SDS;KDC;CLC;OQC;aCK,wCD;cEC;KFU;mBGC;KHwB;CRK;OYC;aCK;KDe;CZG"},"hasCjsExports":false},"type":"js/module"}]}