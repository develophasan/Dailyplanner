{"dependencies":[{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"],"imports":1}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"],"imports":1}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"HOUR_BLOCK_HEIGHT\", {\n    enumerable: true,\n    get: function () {\n      return HOUR_BLOCK_HEIGHT;\n    }\n  });\n  exports.populateEvents = populateEvents;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  var _lodashInRange = require(_dependencyMap[0], \"lodash/inRange\");\n  var inRange = _interopDefault(_lodashInRange);\n  var _xdate = require(_dependencyMap[1], \"xdate\");\n  var XDate = _interopDefault(_xdate);\n  var _commonsConstants = require(_dependencyMap[2], \"../commons/constants\");\n  var constants = _interopDefault(_commonsConstants);\n  const HOUR_BLOCK_HEIGHT = 100;\n  const OVERLAP_EVENTS_SPACINGS = 10;\n  const RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, {\n    dayStart = 0,\n    hourBlockHeight = HOUR_BLOCK_HEIGHT\n  }) {\n    const startTime = new XDate.default(event.start);\n    const endTime = event.end ? new XDate.default(event.end) : new XDate.default(startTime).addHours(1);\n    const dayStartTime = new XDate.default(startTime).clearTime();\n    return Object.assign({}, event, {\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    });\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    let colSpan = 1;\n    for (let i = columnIndex + 1; i < columns.length; i++) {\n      const column = columns[i];\n      const foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    const {\n      screenWidth = constants.default.screenWidth,\n      rightEdgeSpacing = RIGHT_EDGE_SPACING,\n      overlapEventsSpacing = OVERLAP_EVENTS_SPACINGS\n    } = populateOptions;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        const totalWidth = screenWidth - rightEdgeSpacing;\n        const columnSpan = calcColumnSpan(event, columnIndex, columns);\n        const eventLeft = columnIndex / columns.length * totalWidth;\n        let eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    let lastEnd = null;\n    let columns = [];\n    const calculatedEvents = [];\n    const events = _events.map((ev, index) => Object.assign({}, ev, {\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n      // Place current event in the right column where it doesn't overlap\n      let placed = false;\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks(unavailableHours = [], options) {\n    const {\n      hourBlockHeight = HOUR_BLOCK_HEIGHT,\n      dayStart = 0,\n      dayEnd = 24\n    } = options || {};\n    const totalDayHours = dayEnd - dayStart;\n    const totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, inRange.default)(hours.start, 0, 25) || !(0, inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      const startFixed = Math.max(hours.start, dayStart);\n      const endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":147,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"HOUR_BLOCK_HEIGHT"],[15,30,4,0],[16,4,4,0],[17,2,4,0],[18,2,49,0,"exports"],[18,9,49,0],[18,10,49,0,"populateEvents"],[18,24,49,0],[18,27,49,0,"populateEvents"],[18,41,49,0],[19,2,96,0,"exports"],[19,9,96,0],[19,10,96,0,"buildUnavailableHoursBlocks"],[19,37,96,0],[19,40,96,0,"buildUnavailableHoursBlocks"],[19,67,96,0],[20,2,1,0],[20,6,1,0,"_lodashInRange"],[20,20,1,0],[20,23,1,0,"require"],[20,30,1,0],[20,31,1,0,"_dependencyMap"],[20,45,1,0],[21,2,1,0],[21,6,1,0,"inRange"],[21,13,1,0],[21,16,1,0,"_interopDefault"],[21,31,1,0],[21,32,1,0,"_lodashInRange"],[21,46,1,0],[22,2,2,0],[22,6,2,0,"_xdate"],[22,12,2,0],[22,15,2,0,"require"],[22,22,2,0],[22,23,2,0,"_dependencyMap"],[22,37,2,0],[23,2,2,0],[23,6,2,0,"XDate"],[23,11,2,0],[23,14,2,0,"_interopDefault"],[23,29,2,0],[23,30,2,0,"_xdate"],[23,36,2,0],[24,2,3,0],[24,6,3,0,"_commonsConstants"],[24,23,3,0],[24,26,3,0,"require"],[24,33,3,0],[24,34,3,0,"_dependencyMap"],[24,48,3,0],[25,2,3,0],[25,6,3,0,"constants"],[25,15,3,0],[25,18,3,0,"_interopDefault"],[25,33,3,0],[25,34,3,0,"_commonsConstants"],[25,51,3,0],[26,2,4,7],[26,8,4,13,"HOUR_BLOCK_HEIGHT"],[26,25,4,30],[26,28,4,33],[26,31,4,36],[27,2,5,0],[27,8,5,6,"OVERLAP_EVENTS_SPACINGS"],[27,31,5,29],[27,34,5,32],[27,36,5,34],[28,2,6,0],[28,8,6,6,"RIGHT_EDGE_SPACING"],[28,26,6,24],[28,29,6,27],[28,31,6,29],[29,2,7,0],[29,11,7,9,"buildEvent"],[29,21,7,19,"buildEvent"],[29,22,7,20,"event"],[29,27,7,25],[29,29,7,27,"left"],[29,33,7,31],[29,35,7,33,"width"],[29,40,7,38],[29,42,7,40],[30,4,7,42,"dayStart"],[30,12,7,50],[30,15,7,53],[30,16,7,54],[31,4,7,56,"hourBlockHeight"],[31,19,7,71],[31,22,7,74,"HOUR_BLOCK_HEIGHT"],[32,2,7,92],[32,3,7,93],[32,5,7,95],[33,4,8,4],[33,10,8,10,"startTime"],[33,19,8,19],[33,22,8,22],[33,26,8,26,"XDate"],[33,31,8,31],[33,32,8,31,"default"],[33,39,8,31],[33,40,8,32,"event"],[33,45,8,37],[33,46,8,38,"start"],[33,51,8,43],[33,52,8,44],[34,4,9,4],[34,10,9,10,"endTime"],[34,17,9,17],[34,20,9,20,"event"],[34,25,9,25],[34,26,9,26,"end"],[34,29,9,29],[34,32,9,32],[34,36,9,36,"XDate"],[34,41,9,41],[34,42,9,41,"default"],[34,49,9,41],[34,50,9,42,"event"],[34,55,9,47],[34,56,9,48,"end"],[34,59,9,51],[34,60,9,52],[34,63,9,55],[34,67,9,59,"XDate"],[34,72,9,64],[34,73,9,64,"default"],[34,80,9,64],[34,81,9,65,"startTime"],[34,90,9,74],[34,91,9,75],[34,92,9,76,"addHours"],[34,100,9,84],[34,101,9,85],[34,102,9,86],[34,103,9,87],[35,4,10,4],[35,10,10,10,"dayStartTime"],[35,22,10,22],[35,25,10,25],[35,29,10,29,"XDate"],[35,34,10,34],[35,35,10,34,"default"],[35,42,10,34],[35,43,10,35,"startTime"],[35,52,10,44],[35,53,10,45],[35,54,10,46,"clearTime"],[35,63,10,55],[35,64,10,56],[35,65,10,57],[36,4,11,4],[36,11,11,4,"Object"],[36,17,11,4],[36,18,11,4,"assign"],[36,24,11,4],[36,29,12,11,"event"],[36,34,12,16],[37,6,13,8,"top"],[37,9,13,11],[37,11,13,13],[37,12,13,14,"dayStartTime"],[37,24,13,26],[37,25,13,27,"diffHours"],[37,34,13,36],[37,35,13,37,"startTime"],[37,44,13,46],[37,45,13,47],[37,48,13,50,"dayStart"],[37,56,13,58],[37,60,13,62,"hourBlockHeight"],[37,75,13,77],[38,6,14,8,"height"],[38,12,14,14],[38,14,14,16,"startTime"],[38,23,14,25],[38,24,14,26,"diffHours"],[38,33,14,35],[38,34,14,36,"endTime"],[38,41,14,43],[38,42,14,44],[38,45,14,47,"hourBlockHeight"],[38,60,14,62],[39,6,15,8,"width"],[39,11,15,13],[40,6,16,8,"left"],[41,4,16,12],[42,2,18,0],[43,2,19,0],[43,11,19,9,"hasCollision"],[43,23,19,21,"hasCollision"],[43,24,19,22,"a"],[43,25,19,23],[43,27,19,25,"b"],[43,28,19,26],[43,30,19,28],[44,4,20,4],[44,11,20,11,"a"],[44,12,20,12],[44,13,20,13,"end"],[44,16,20,16],[44,19,20,19,"b"],[44,20,20,20],[44,21,20,21,"start"],[44,26,20,26],[44,30,20,30,"a"],[44,31,20,31],[44,32,20,32,"start"],[44,37,20,37],[44,40,20,40,"b"],[44,41,20,41],[44,42,20,42,"end"],[44,45,20,45],[45,2,21,0],[46,2,22,0],[46,11,22,9,"calcColumnSpan"],[46,25,22,23,"calcColumnSpan"],[46,26,22,24,"event"],[46,31,22,29],[46,33,22,31,"columnIndex"],[46,44,22,42],[46,46,22,44,"columns"],[46,53,22,51],[46,55,22,53],[47,4,23,4],[47,8,23,8,"colSpan"],[47,15,23,15],[47,18,23,18],[47,19,23,19],[48,4,24,4],[48,9,24,9],[48,13,24,13,"i"],[48,14,24,14],[48,17,24,17,"columnIndex"],[48,28,24,28],[48,31,24,31],[48,32,24,32],[48,34,24,34,"i"],[48,35,24,35],[48,38,24,38,"columns"],[48,45,24,45],[48,46,24,46,"length"],[48,52,24,52],[48,54,24,54,"i"],[48,55,24,55],[48,57,24,57],[48,59,24,59],[49,6,25,8],[49,12,25,14,"column"],[49,18,25,20],[49,21,25,23,"columns"],[49,28,25,30],[49,29,25,31,"i"],[49,30,25,32],[49,31,25,33],[50,6,26,8],[50,12,26,14,"foundCollision"],[50,26,26,28],[50,29,26,31,"column"],[50,35,26,37],[50,36,26,38,"find"],[50,40,26,42],[50,41,26,43,"ev"],[50,43,26,45],[50,47,26,49,"hasCollision"],[50,59,26,61],[50,60,26,62,"event"],[50,65,26,67],[50,67,26,69,"ev"],[50,69,26,71],[50,70,26,72],[50,71,26,73],[51,6,27,8],[51,10,27,12,"foundCollision"],[51,24,27,26],[51,26,27,28],[52,8,28,12],[52,15,28,19,"colSpan"],[52,22,28,26],[53,6,29,8],[54,6,30,8,"colSpan"],[54,13,30,15],[54,15,30,17],[55,4,31,4],[56,4,32,4],[56,11,32,11,"colSpan"],[56,18,32,18],[57,2,33,0],[58,2,34,0],[58,11,34,9,"packOverlappingEventGroup"],[58,36,34,34,"packOverlappingEventGroup"],[58,37,34,35,"columns"],[58,44,34,42],[58,46,34,44,"calculatedEvents"],[58,62,34,60],[58,64,34,62,"populateOptions"],[58,79,34,77],[58,81,34,79],[59,4,35,4],[59,10,35,10],[60,6,35,12,"screenWidth"],[60,17,35,23],[60,20,35,26,"constants"],[60,29,35,35],[60,30,35,35,"default"],[60,37,35,35],[60,38,35,36,"screenWidth"],[60,49,35,47],[61,6,35,49,"rightEdgeSpacing"],[61,22,35,65],[61,25,35,68,"RIGHT_EDGE_SPACING"],[61,43,35,86],[62,6,35,88,"overlapEventsSpacing"],[62,26,35,108],[62,29,35,111,"OVERLAP_EVENTS_SPACINGS"],[63,4,35,135],[63,5,35,136],[63,8,35,139,"populateOptions"],[63,23,35,154],[64,4,36,4,"columns"],[64,11,36,11],[64,12,36,12,"forEach"],[64,19,36,19],[64,20,36,20],[64,21,36,21,"column"],[64,27,36,27],[64,29,36,29,"columnIndex"],[64,40,36,40],[64,45,36,45],[65,6,37,8,"column"],[65,12,37,14],[65,13,37,15,"forEach"],[65,20,37,22],[65,21,37,23,"event"],[65,26,37,28],[65,30,37,32],[66,8,38,12],[66,14,38,18,"totalWidth"],[66,24,38,28],[66,27,38,31,"screenWidth"],[66,38,38,42],[66,41,38,45,"rightEdgeSpacing"],[66,57,38,61],[67,8,39,12],[67,14,39,18,"columnSpan"],[67,24,39,28],[67,27,39,31,"calcColumnSpan"],[67,41,39,45],[67,42,39,46,"event"],[67,47,39,51],[67,49,39,53,"columnIndex"],[67,60,39,64],[67,62,39,66,"columns"],[67,69,39,73],[67,70,39,74],[68,8,40,12],[68,14,40,18,"eventLeft"],[68,23,40,27],[68,26,40,31,"columnIndex"],[68,37,40,42],[68,40,40,45,"columns"],[68,47,40,52],[68,48,40,53,"length"],[68,54,40,59],[68,57,40,63,"totalWidth"],[68,67,40,73],[69,8,41,12],[69,12,41,16,"eventWidth"],[69,22,41,26],[69,25,41,29,"totalWidth"],[69,35,41,39],[69,39,41,43,"columnSpan"],[69,49,41,53],[69,52,41,56,"columns"],[69,59,41,63],[69,60,41,64,"length"],[69,66,41,70],[69,67,41,71],[70,8,42,12],[70,12,42,16,"columnIndex"],[70,23,42,27],[70,26,42,30,"columnSpan"],[70,36,42,40],[70,40,42,44,"columns"],[70,47,42,51],[70,48,42,52,"length"],[70,54,42,58],[70,57,42,61],[70,58,42,62],[70,60,42,64],[71,10,43,16,"eventWidth"],[71,20,43,26],[71,24,43,30,"overlapEventsSpacing"],[71,44,43,50],[72,8,44,12],[73,8,45,12,"calculatedEvents"],[73,24,45,28],[73,25,45,29,"push"],[73,29,45,33],[73,30,45,34,"buildEvent"],[73,40,45,44],[73,41,45,45,"event"],[73,46,45,50],[73,48,45,52,"eventLeft"],[73,57,45,61],[73,59,45,63,"eventWidth"],[73,69,45,73],[73,71,45,75,"populateOptions"],[73,86,45,90],[73,87,45,91],[73,88,45,92],[74,6,46,8],[74,7,46,9],[74,8,46,10],[75,4,47,4],[75,5,47,5],[75,6,47,6],[76,2,48,0],[77,2,49,7],[77,11,49,16,"populateEvents"],[77,25,49,30,"populateEvents"],[77,26,49,31,"_events"],[77,33,49,38],[77,35,49,40,"populateOptions"],[77,50,49,55],[77,52,49,57],[78,4,50,4],[78,8,50,8,"lastEnd"],[78,15,50,15],[78,18,50,18],[78,22,50,22],[79,4,51,4],[79,8,51,8,"columns"],[79,15,51,15],[79,18,51,18],[79,20,51,20],[80,4,52,4],[80,10,52,10,"calculatedEvents"],[80,26,52,26],[80,29,52,29],[80,31,52,31],[81,4,53,4],[81,10,53,10,"events"],[81,16,53,16],[81,19,53,19,"_events"],[81,26,53,26],[81,27,54,9,"map"],[81,30,54,12],[81,31,54,13],[81,32,54,14,"ev"],[81,34,54,16],[81,36,54,18,"index"],[81,41,54,23],[81,46,54,23,"Object"],[81,52,54,23],[81,53,54,23,"assign"],[81,59,54,23],[81,64,54,34,"ev"],[81,66,54,36],[82,6,54,38,"index"],[82,11,54,43],[82,13,54,45,"index"],[83,4,54,50],[83,6,54,53],[83,7,54,54],[83,8,55,9,"sort"],[83,12,55,13],[83,13,55,14],[83,23,55,24,"a"],[83,24,55,25],[83,26,55,27,"b"],[83,27,55,28],[83,29,55,30],[84,6,56,8],[84,10,56,12,"a"],[84,11,56,13],[84,12,56,14,"start"],[84,17,56,19],[84,20,56,22,"b"],[84,21,56,23],[84,22,56,24,"start"],[84,27,56,29],[84,29,57,12],[84,36,57,19],[84,37,57,20],[84,38,57,21],[85,6,58,8],[85,10,58,12,"a"],[85,11,58,13],[85,12,58,14,"start"],[85,17,58,19],[85,20,58,22,"b"],[85,21,58,23],[85,22,58,24,"start"],[85,27,58,29],[85,29,59,12],[85,36,59,19],[85,37,59,20],[86,6,60,8],[86,10,60,12,"a"],[86,11,60,13],[86,12,60,14,"end"],[86,15,60,17],[86,18,60,20,"b"],[86,19,60,21],[86,20,60,22,"end"],[86,23,60,25],[86,25,61,12],[86,32,61,19],[86,33,61,20],[86,34,61,21],[87,6,62,8],[87,10,62,12,"a"],[87,11,62,13],[87,12,62,14,"end"],[87,15,62,17],[87,18,62,20,"b"],[87,19,62,21],[87,20,62,22,"end"],[87,23,62,25],[87,25,63,12],[87,32,63,19],[87,33,63,20],[88,6,64,8],[88,13,64,15],[88,14,64,16],[89,4,65,4],[89,5,65,5],[89,6,65,6],[90,4,66,4,"events"],[90,10,66,10],[90,11,66,11,"forEach"],[90,18,66,18],[90,19,66,19],[90,29,66,29,"ev"],[90,31,66,31],[90,33,66,33],[91,6,67,8],[92,6,68,8],[92,10,68,12,"lastEnd"],[92,17,68,19],[92,22,68,24],[92,26,68,28],[92,30,68,32,"ev"],[92,32,68,34],[92,33,68,35,"start"],[92,38,68,40],[92,42,68,44,"lastEnd"],[92,49,68,51],[92,51,68,53],[93,8,69,12,"packOverlappingEventGroup"],[93,33,69,37],[93,34,69,38,"columns"],[93,41,69,45],[93,43,69,47,"calculatedEvents"],[93,59,69,63],[93,61,69,65,"populateOptions"],[93,76,69,80],[93,77,69,81],[94,8,70,12,"columns"],[94,15,70,19],[94,18,70,22],[94,20,70,24],[95,8,71,12,"lastEnd"],[95,15,71,19],[95,18,71,22],[95,22,71,26],[96,6,72,8],[97,6,73,8],[98,6,74,8],[98,10,74,12,"placed"],[98,16,74,18],[98,19,74,21],[98,24,74,26],[99,6,75,8],[99,11,75,13],[99,15,75,17,"i"],[99,16,75,18],[99,19,75,21],[99,20,75,22],[99,22,75,24,"i"],[99,23,75,25],[99,26,75,28,"columns"],[99,33,75,35],[99,34,75,36,"length"],[99,40,75,42],[99,42,75,44,"i"],[99,43,75,45],[99,45,75,47],[99,47,75,49],[100,8,76,12],[100,14,76,18,"col"],[100,17,76,21],[100,20,76,24,"columns"],[100,27,76,31],[100,28,76,32,"i"],[100,29,76,33],[100,30,76,34],[101,8,77,12],[101,12,77,16],[101,13,77,17,"hasCollision"],[101,25,77,29],[101,26,77,30,"col"],[101,29,77,33],[101,30,77,34,"col"],[101,33,77,37],[101,34,77,38,"length"],[101,40,77,44],[101,43,77,47],[101,44,77,48],[101,45,77,49],[101,47,77,51,"ev"],[101,49,77,53],[101,50,77,54],[101,52,77,56],[102,10,78,16,"col"],[102,13,78,19],[102,14,78,20,"push"],[102,18,78,24],[102,19,78,25,"ev"],[102,21,78,27],[102,22,78,28],[103,10,79,16,"placed"],[103,16,79,22],[103,19,79,25],[103,23,79,29],[104,10,80,16],[105,8,81,12],[106,6,82,8],[107,6,83,8],[108,6,84,8],[108,10,84,12],[108,11,84,13,"placed"],[108,17,84,19],[108,19,84,21],[109,8,85,12,"columns"],[109,15,85,19],[109,16,85,20,"push"],[109,20,85,24],[109,21,85,25],[109,22,85,26,"ev"],[109,24,85,28],[109,25,85,29],[109,26,85,30],[110,6,86,8],[111,6,87,8],[111,10,87,12,"lastEnd"],[111,17,87,19],[111,22,87,24],[111,26,87,28],[111,30,87,32,"ev"],[111,32,87,34],[111,33,87,35,"end"],[111,36,87,38],[111,39,87,41,"lastEnd"],[111,46,87,48],[111,48,87,50],[112,8,88,12,"lastEnd"],[112,15,88,19],[112,18,88,22,"ev"],[112,20,88,24],[112,21,88,25,"end"],[112,24,88,28],[113,6,89,8],[114,4,90,4],[114,5,90,5],[114,6,90,6],[115,4,91,4],[115,8,91,8,"columns"],[115,15,91,15],[115,16,91,16,"length"],[115,22,91,22],[115,25,91,25],[115,26,91,26],[115,28,91,28],[116,6,92,8,"packOverlappingEventGroup"],[116,31,92,33],[116,32,92,34,"columns"],[116,39,92,41],[116,41,92,43,"calculatedEvents"],[116,57,92,59],[116,59,92,61,"populateOptions"],[116,74,92,76],[116,75,92,77],[117,4,93,4],[118,4,94,4],[118,11,94,11,"calculatedEvents"],[118,27,94,27],[119,2,95,0],[120,2,96,7],[120,11,96,16,"buildUnavailableHoursBlocks"],[120,38,96,43,"buildUnavailableHoursBlocks"],[120,39,96,44,"unavailableHours"],[120,55,96,60],[120,58,96,63],[120,60,96,65],[120,62,96,67,"options"],[120,69,96,74],[120,71,96,76],[121,4,97,4],[121,10,97,10],[122,6,97,12,"hourBlockHeight"],[122,21,97,27],[122,24,97,30,"HOUR_BLOCK_HEIGHT"],[122,41,97,47],[123,6,97,49,"dayStart"],[123,14,97,57],[123,17,97,60],[123,18,97,61],[124,6,97,63,"dayEnd"],[124,12,97,69],[124,15,97,72],[125,4,97,75],[125,5,97,76],[125,8,97,79,"options"],[125,15,97,86],[125,19,97,90],[125,20,97,91],[125,21,97,92],[126,4,98,4],[126,10,98,10,"totalDayHours"],[126,23,98,23],[126,26,98,26,"dayEnd"],[126,32,98,32],[126,35,98,35,"dayStart"],[126,43,98,43],[127,4,99,4],[127,10,99,10,"totalDayHeight"],[127,24,99,24],[127,27,99,27],[127,28,99,28,"dayEnd"],[127,34,99,34],[127,37,99,37,"dayStart"],[127,45,99,45],[127,49,99,49,"hourBlockHeight"],[127,64,99,64],[128,4,100,4],[128,11,100,12,"unavailableHours"],[128,27,100,28],[128,28,101,9,"map"],[128,31,101,12],[128,32,101,13,"hours"],[128,37,101,18],[128,41,101,22],[129,6,102,8],[129,10,102,12],[129,11,102,13],[129,15,102,13,"inRange"],[129,22,102,20],[129,23,102,20,"default"],[129,30,102,20],[129,32,102,21,"hours"],[129,37,102,26],[129,38,102,27,"start"],[129,43,102,32],[129,45,102,34],[129,46,102,35],[129,48,102,37],[129,50,102,39],[129,51,102,40],[129,55,102,44],[129,56,102,45],[129,60,102,45,"inRange"],[129,67,102,52],[129,68,102,52,"default"],[129,75,102,52],[129,77,102,53,"hours"],[129,82,102,58],[129,83,102,59,"end"],[129,86,102,62],[129,88,102,64],[129,89,102,65],[129,91,102,67],[129,93,102,69],[129,94,102,70],[129,96,102,72],[130,8,103,12,"console"],[130,15,103,19],[130,16,103,20,"error"],[130,21,103,25],[130,22,103,26],[130,103,103,107],[130,104,103,108],[131,8,104,12],[131,15,104,19,"undefined"],[131,24,104,28],[132,6,105,8],[133,6,106,8],[133,10,106,12,"hours"],[133,15,106,17],[133,16,106,18,"start"],[133,21,106,23],[133,25,106,27,"hours"],[133,30,106,32],[133,31,106,33,"end"],[133,34,106,36],[133,36,106,38],[134,8,107,12,"console"],[134,15,107,19],[134,16,107,20,"error"],[134,21,107,25],[134,22,107,26],[134,111,107,115],[134,112,107,116],[135,8,108,12],[135,15,108,19,"undefined"],[135,24,108,28],[136,6,109,8],[137,6,110,8],[137,12,110,14,"startFixed"],[137,22,110,24],[137,25,110,27,"Math"],[137,29,110,31],[137,30,110,32,"max"],[137,33,110,35],[137,34,110,36,"hours"],[137,39,110,41],[137,40,110,42,"start"],[137,45,110,47],[137,47,110,49,"dayStart"],[137,55,110,57],[137,56,110,58],[138,6,111,8],[138,12,111,14,"endFixed"],[138,20,111,22],[138,23,111,25,"Math"],[138,27,111,29],[138,28,111,30,"min"],[138,31,111,33],[138,32,111,34,"hours"],[138,37,111,39],[138,38,111,40,"end"],[138,41,111,43],[138,43,111,45,"dayEnd"],[138,49,111,51],[138,50,111,52],[139,6,112,8],[139,13,112,15],[140,8,113,12,"top"],[140,11,113,15],[140,13,113,18],[140,14,113,19,"startFixed"],[140,24,113,29],[140,27,113,32,"dayStart"],[140,35,113,40],[140,39,113,44,"totalDayHours"],[140,52,113,57],[140,55,113,61,"totalDayHeight"],[140,69,113,75],[141,8,114,12,"height"],[141,14,114,18],[141,16,114,20],[141,17,114,21,"endFixed"],[141,25,114,29],[141,28,114,32,"startFixed"],[141,38,114,42],[141,42,114,46,"hourBlockHeight"],[142,6,115,8],[142,7,115,9],[143,4,116,4],[143,5,116,5],[144,4,117,8],[145,4,117,8],[145,5,118,9,"filter"],[145,11,118,15],[145,12,118,16,"Boolean"],[145,19,118,23],[145,20,118,24],[146,2,119,0],[147,0,119,1],[147,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;ACM;CDW;AEC;CFE;AGC;2CCI,6BD;CHO;AKC;oBCE;uBCC;SDS;KDC;CLC;OQC;aCK,wCD;cEC;KFU;mBGC;KHwB;CRK;OYC;aCK;KDe;CZG"},"hasCjsExports":false},"type":"js/module"}]}