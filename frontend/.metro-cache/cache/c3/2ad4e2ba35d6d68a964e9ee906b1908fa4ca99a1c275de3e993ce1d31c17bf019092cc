{"dependencies":[{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"],"imports":1}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"],"imports":1}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"HOUR_BLOCK_HEIGHT\", {\n    enumerable: true,\n    get: function () {\n      return HOUR_BLOCK_HEIGHT;\n    }\n  });\n  exports.populateEvents = populateEvents;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  var _lodashInRange = require(_dependencyMap[0], \"lodash/inRange\");\n  var inRange = _interopDefault(_lodashInRange);\n  var _xdate = require(_dependencyMap[1], \"xdate\");\n  var XDate = _interopDefault(_xdate);\n  var _commonsConstants = require(_dependencyMap[2], \"../commons/constants\");\n  var constants = _interopDefault(_commonsConstants);\n  const HOUR_BLOCK_HEIGHT = 100;\n  const OVERLAP_EVENTS_SPACINGS = 10;\n  const RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, {\n    dayStart = 0,\n    hourBlockHeight = HOUR_BLOCK_HEIGHT\n  }) {\n    const startTime = new XDate.default(event.start);\n    const endTime = event.end ? new XDate.default(event.end) : new XDate.default(startTime).addHours(1);\n    const dayStartTime = new XDate.default(startTime).clearTime();\n    return {\n      ...event,\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    };\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    let colSpan = 1;\n    for (let i = columnIndex + 1; i < columns.length; i++) {\n      const column = columns[i];\n      const foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    const {\n      screenWidth = constants.default.screenWidth,\n      rightEdgeSpacing = RIGHT_EDGE_SPACING,\n      overlapEventsSpacing = OVERLAP_EVENTS_SPACINGS\n    } = populateOptions;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        const totalWidth = screenWidth - rightEdgeSpacing;\n        const columnSpan = calcColumnSpan(event, columnIndex, columns);\n        const eventLeft = columnIndex / columns.length * totalWidth;\n        let eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    let lastEnd = null;\n    let columns = [];\n    const calculatedEvents = [];\n    const events = _events.map((ev, index) => ({\n      ...ev,\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n      // Place current event in the right column where it doesn't overlap\n      let placed = false;\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks(unavailableHours = [], options) {\n    const {\n      hourBlockHeight = HOUR_BLOCK_HEIGHT,\n      dayStart = 0,\n      dayEnd = 24\n    } = options || {};\n    const totalDayHours = dayEnd - dayStart;\n    const totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, inRange.default)(hours.start, 0, 25) || !(0, inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      const startFixed = Math.max(hours.start, dayStart);\n      const endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":149,"map":[[12,2,4,0,"Object"],[12,8,4,0],[12,9,4,0,"defineProperty"],[12,23,4,0],[12,24,4,0,"exports"],[12,31,4,0],[13,4,4,0,"enumerable"],[13,14,4,0],[14,4,4,0,"get"],[14,7,4,0],[14,18,4,0,"get"],[14,19,4,0],[15,6,4,0],[15,13,4,0,"HOUR_BLOCK_HEIGHT"],[15,30,4,0],[16,4,4,0],[17,2,4,0],[18,2,49,0,"exports"],[18,9,49,0],[18,10,49,0,"populateEvents"],[18,24,49,0],[18,27,49,0,"populateEvents"],[18,41,49,0],[19,2,96,0,"exports"],[19,9,96,0],[19,10,96,0,"buildUnavailableHoursBlocks"],[19,37,96,0],[19,40,96,0,"buildUnavailableHoursBlocks"],[19,67,96,0],[20,2,1,0],[20,6,1,0,"_lodashInRange"],[20,20,1,0],[20,23,1,0,"require"],[20,30,1,0],[20,31,1,0,"_dependencyMap"],[20,45,1,0],[21,2,1,0],[21,6,1,0,"inRange"],[21,13,1,0],[21,16,1,0,"_interopDefault"],[21,31,1,0],[21,32,1,0,"_lodashInRange"],[21,46,1,0],[22,2,2,0],[22,6,2,0,"_xdate"],[22,12,2,0],[22,15,2,0,"require"],[22,22,2,0],[22,23,2,0,"_dependencyMap"],[22,37,2,0],[23,2,2,0],[23,6,2,0,"XDate"],[23,11,2,0],[23,14,2,0,"_interopDefault"],[23,29,2,0],[23,30,2,0,"_xdate"],[23,36,2,0],[24,2,3,0],[24,6,3,0,"_commonsConstants"],[24,23,3,0],[24,26,3,0,"require"],[24,33,3,0],[24,34,3,0,"_dependencyMap"],[24,48,3,0],[25,2,3,0],[25,6,3,0,"constants"],[25,15,3,0],[25,18,3,0,"_interopDefault"],[25,33,3,0],[25,34,3,0,"_commonsConstants"],[25,51,3,0],[26,2,4,7],[26,8,4,13,"HOUR_BLOCK_HEIGHT"],[26,25,4,30],[26,28,4,33],[26,31,4,36],[27,2,5,0],[27,8,5,6,"OVERLAP_EVENTS_SPACINGS"],[27,31,5,29],[27,34,5,32],[27,36,5,34],[28,2,6,0],[28,8,6,6,"RIGHT_EDGE_SPACING"],[28,26,6,24],[28,29,6,27],[28,31,6,29],[29,2,7,0],[29,11,7,9,"buildEvent"],[29,21,7,19,"buildEvent"],[29,22,7,20,"event"],[29,27,7,25],[29,29,7,27,"left"],[29,33,7,31],[29,35,7,33,"width"],[29,40,7,38],[29,42,7,40],[30,4,7,42,"dayStart"],[30,12,7,50],[30,15,7,53],[30,16,7,54],[31,4,7,56,"hourBlockHeight"],[31,19,7,71],[31,22,7,74,"HOUR_BLOCK_HEIGHT"],[32,2,7,92],[32,3,7,93],[32,5,7,95],[33,4,8,4],[33,10,8,10,"startTime"],[33,19,8,19],[33,22,8,22],[33,26,8,26,"XDate"],[33,31,8,31],[33,32,8,31,"default"],[33,39,8,31],[33,40,8,32,"event"],[33,45,8,37],[33,46,8,38,"start"],[33,51,8,43],[33,52,8,44],[34,4,9,4],[34,10,9,10,"endTime"],[34,17,9,17],[34,20,9,20,"event"],[34,25,9,25],[34,26,9,26,"end"],[34,29,9,29],[34,32,9,32],[34,36,9,36,"XDate"],[34,41,9,41],[34,42,9,41,"default"],[34,49,9,41],[34,50,9,42,"event"],[34,55,9,47],[34,56,9,48,"end"],[34,59,9,51],[34,60,9,52],[34,63,9,55],[34,67,9,59,"XDate"],[34,72,9,64],[34,73,9,64,"default"],[34,80,9,64],[34,81,9,65,"startTime"],[34,90,9,74],[34,91,9,75],[34,92,9,76,"addHours"],[34,100,9,84],[34,101,9,85],[34,102,9,86],[34,103,9,87],[35,4,10,4],[35,10,10,10,"dayStartTime"],[35,22,10,22],[35,25,10,25],[35,29,10,29,"XDate"],[35,34,10,34],[35,35,10,34,"default"],[35,42,10,34],[35,43,10,35,"startTime"],[35,52,10,44],[35,53,10,45],[35,54,10,46,"clearTime"],[35,63,10,55],[35,64,10,56],[35,65,10,57],[36,4,11,4],[36,11,11,11],[37,6,12,8],[37,9,12,11,"event"],[37,14,12,16],[38,6,13,8,"top"],[38,9,13,11],[38,11,13,13],[38,12,13,14,"dayStartTime"],[38,24,13,26],[38,25,13,27,"diffHours"],[38,34,13,36],[38,35,13,37,"startTime"],[38,44,13,46],[38,45,13,47],[38,48,13,50,"dayStart"],[38,56,13,58],[38,60,13,62,"hourBlockHeight"],[38,75,13,77],[39,6,14,8,"height"],[39,12,14,14],[39,14,14,16,"startTime"],[39,23,14,25],[39,24,14,26,"diffHours"],[39,33,14,35],[39,34,14,36,"endTime"],[39,41,14,43],[39,42,14,44],[39,45,14,47,"hourBlockHeight"],[39,60,14,62],[40,6,15,8,"width"],[40,11,15,13],[41,6,16,8,"left"],[42,4,17,4],[42,5,17,5],[43,2,18,0],[44,2,19,0],[44,11,19,9,"hasCollision"],[44,23,19,21,"hasCollision"],[44,24,19,22,"a"],[44,25,19,23],[44,27,19,25,"b"],[44,28,19,26],[44,30,19,28],[45,4,20,4],[45,11,20,11,"a"],[45,12,20,12],[45,13,20,13,"end"],[45,16,20,16],[45,19,20,19,"b"],[45,20,20,20],[45,21,20,21,"start"],[45,26,20,26],[45,30,20,30,"a"],[45,31,20,31],[45,32,20,32,"start"],[45,37,20,37],[45,40,20,40,"b"],[45,41,20,41],[45,42,20,42,"end"],[45,45,20,45],[46,2,21,0],[47,2,22,0],[47,11,22,9,"calcColumnSpan"],[47,25,22,23,"calcColumnSpan"],[47,26,22,24,"event"],[47,31,22,29],[47,33,22,31,"columnIndex"],[47,44,22,42],[47,46,22,44,"columns"],[47,53,22,51],[47,55,22,53],[48,4,23,4],[48,8,23,8,"colSpan"],[48,15,23,15],[48,18,23,18],[48,19,23,19],[49,4,24,4],[49,9,24,9],[49,13,24,13,"i"],[49,14,24,14],[49,17,24,17,"columnIndex"],[49,28,24,28],[49,31,24,31],[49,32,24,32],[49,34,24,34,"i"],[49,35,24,35],[49,38,24,38,"columns"],[49,45,24,45],[49,46,24,46,"length"],[49,52,24,52],[49,54,24,54,"i"],[49,55,24,55],[49,57,24,57],[49,59,24,59],[50,6,25,8],[50,12,25,14,"column"],[50,18,25,20],[50,21,25,23,"columns"],[50,28,25,30],[50,29,25,31,"i"],[50,30,25,32],[50,31,25,33],[51,6,26,8],[51,12,26,14,"foundCollision"],[51,26,26,28],[51,29,26,31,"column"],[51,35,26,37],[51,36,26,38,"find"],[51,40,26,42],[51,41,26,43,"ev"],[51,43,26,45],[51,47,26,49,"hasCollision"],[51,59,26,61],[51,60,26,62,"event"],[51,65,26,67],[51,67,26,69,"ev"],[51,69,26,71],[51,70,26,72],[51,71,26,73],[52,6,27,8],[52,10,27,12,"foundCollision"],[52,24,27,26],[52,26,27,28],[53,8,28,12],[53,15,28,19,"colSpan"],[53,22,28,26],[54,6,29,8],[55,6,30,8,"colSpan"],[55,13,30,15],[55,15,30,17],[56,4,31,4],[57,4,32,4],[57,11,32,11,"colSpan"],[57,18,32,18],[58,2,33,0],[59,2,34,0],[59,11,34,9,"packOverlappingEventGroup"],[59,36,34,34,"packOverlappingEventGroup"],[59,37,34,35,"columns"],[59,44,34,42],[59,46,34,44,"calculatedEvents"],[59,62,34,60],[59,64,34,62,"populateOptions"],[59,79,34,77],[59,81,34,79],[60,4,35,4],[60,10,35,10],[61,6,35,12,"screenWidth"],[61,17,35,23],[61,20,35,26,"constants"],[61,29,35,35],[61,30,35,35,"default"],[61,37,35,35],[61,38,35,36,"screenWidth"],[61,49,35,47],[62,6,35,49,"rightEdgeSpacing"],[62,22,35,65],[62,25,35,68,"RIGHT_EDGE_SPACING"],[62,43,35,86],[63,6,35,88,"overlapEventsSpacing"],[63,26,35,108],[63,29,35,111,"OVERLAP_EVENTS_SPACINGS"],[64,4,35,135],[64,5,35,136],[64,8,35,139,"populateOptions"],[64,23,35,154],[65,4,36,4,"columns"],[65,11,36,11],[65,12,36,12,"forEach"],[65,19,36,19],[65,20,36,20],[65,21,36,21,"column"],[65,27,36,27],[65,29,36,29,"columnIndex"],[65,40,36,40],[65,45,36,45],[66,6,37,8,"column"],[66,12,37,14],[66,13,37,15,"forEach"],[66,20,37,22],[66,21,37,23,"event"],[66,26,37,28],[66,30,37,32],[67,8,38,12],[67,14,38,18,"totalWidth"],[67,24,38,28],[67,27,38,31,"screenWidth"],[67,38,38,42],[67,41,38,45,"rightEdgeSpacing"],[67,57,38,61],[68,8,39,12],[68,14,39,18,"columnSpan"],[68,24,39,28],[68,27,39,31,"calcColumnSpan"],[68,41,39,45],[68,42,39,46,"event"],[68,47,39,51],[68,49,39,53,"columnIndex"],[68,60,39,64],[68,62,39,66,"columns"],[68,69,39,73],[68,70,39,74],[69,8,40,12],[69,14,40,18,"eventLeft"],[69,23,40,27],[69,26,40,31,"columnIndex"],[69,37,40,42],[69,40,40,45,"columns"],[69,47,40,52],[69,48,40,53,"length"],[69,54,40,59],[69,57,40,63,"totalWidth"],[69,67,40,73],[70,8,41,12],[70,12,41,16,"eventWidth"],[70,22,41,26],[70,25,41,29,"totalWidth"],[70,35,41,39],[70,39,41,43,"columnSpan"],[70,49,41,53],[70,52,41,56,"columns"],[70,59,41,63],[70,60,41,64,"length"],[70,66,41,70],[70,67,41,71],[71,8,42,12],[71,12,42,16,"columnIndex"],[71,23,42,27],[71,26,42,30,"columnSpan"],[71,36,42,40],[71,40,42,44,"columns"],[71,47,42,51],[71,48,42,52,"length"],[71,54,42,58],[71,57,42,61],[71,58,42,62],[71,60,42,64],[72,10,43,16,"eventWidth"],[72,20,43,26],[72,24,43,30,"overlapEventsSpacing"],[72,44,43,50],[73,8,44,12],[74,8,45,12,"calculatedEvents"],[74,24,45,28],[74,25,45,29,"push"],[74,29,45,33],[74,30,45,34,"buildEvent"],[74,40,45,44],[74,41,45,45,"event"],[74,46,45,50],[74,48,45,52,"eventLeft"],[74,57,45,61],[74,59,45,63,"eventWidth"],[74,69,45,73],[74,71,45,75,"populateOptions"],[74,86,45,90],[74,87,45,91],[74,88,45,92],[75,6,46,8],[75,7,46,9],[75,8,46,10],[76,4,47,4],[76,5,47,5],[76,6,47,6],[77,2,48,0],[78,2,49,7],[78,11,49,16,"populateEvents"],[78,25,49,30,"populateEvents"],[78,26,49,31,"_events"],[78,33,49,38],[78,35,49,40,"populateOptions"],[78,50,49,55],[78,52,49,57],[79,4,50,4],[79,8,50,8,"lastEnd"],[79,15,50,15],[79,18,50,18],[79,22,50,22],[80,4,51,4],[80,8,51,8,"columns"],[80,15,51,15],[80,18,51,18],[80,20,51,20],[81,4,52,4],[81,10,52,10,"calculatedEvents"],[81,26,52,26],[81,29,52,29],[81,31,52,31],[82,4,53,4],[82,10,53,10,"events"],[82,16,53,16],[82,19,53,19,"_events"],[82,26,53,26],[82,27,54,9,"map"],[82,30,54,12],[82,31,54,13],[82,32,54,14,"ev"],[82,34,54,16],[82,36,54,18,"index"],[82,41,54,23],[82,47,54,29],[83,6,54,31],[83,9,54,34,"ev"],[83,11,54,36],[84,6,54,38,"index"],[84,11,54,43],[84,13,54,45,"index"],[85,4,54,51],[85,5,54,52],[85,6,54,53],[85,7,54,54],[85,8,55,9,"sort"],[85,12,55,13],[85,13,55,14],[85,23,55,24,"a"],[85,24,55,25],[85,26,55,27,"b"],[85,27,55,28],[85,29,55,30],[86,6,56,8],[86,10,56,12,"a"],[86,11,56,13],[86,12,56,14,"start"],[86,17,56,19],[86,20,56,22,"b"],[86,21,56,23],[86,22,56,24,"start"],[86,27,56,29],[86,29,57,12],[86,36,57,19],[86,37,57,20],[86,38,57,21],[87,6,58,8],[87,10,58,12,"a"],[87,11,58,13],[87,12,58,14,"start"],[87,17,58,19],[87,20,58,22,"b"],[87,21,58,23],[87,22,58,24,"start"],[87,27,58,29],[87,29,59,12],[87,36,59,19],[87,37,59,20],[88,6,60,8],[88,10,60,12,"a"],[88,11,60,13],[88,12,60,14,"end"],[88,15,60,17],[88,18,60,20,"b"],[88,19,60,21],[88,20,60,22,"end"],[88,23,60,25],[88,25,61,12],[88,32,61,19],[88,33,61,20],[88,34,61,21],[89,6,62,8],[89,10,62,12,"a"],[89,11,62,13],[89,12,62,14,"end"],[89,15,62,17],[89,18,62,20,"b"],[89,19,62,21],[89,20,62,22,"end"],[89,23,62,25],[89,25,63,12],[89,32,63,19],[89,33,63,20],[90,6,64,8],[90,13,64,15],[90,14,64,16],[91,4,65,4],[91,5,65,5],[91,6,65,6],[92,4,66,4,"events"],[92,10,66,10],[92,11,66,11,"forEach"],[92,18,66,18],[92,19,66,19],[92,29,66,29,"ev"],[92,31,66,31],[92,33,66,33],[93,6,67,8],[94,6,68,8],[94,10,68,12,"lastEnd"],[94,17,68,19],[94,22,68,24],[94,26,68,28],[94,30,68,32,"ev"],[94,32,68,34],[94,33,68,35,"start"],[94,38,68,40],[94,42,68,44,"lastEnd"],[94,49,68,51],[94,51,68,53],[95,8,69,12,"packOverlappingEventGroup"],[95,33,69,37],[95,34,69,38,"columns"],[95,41,69,45],[95,43,69,47,"calculatedEvents"],[95,59,69,63],[95,61,69,65,"populateOptions"],[95,76,69,80],[95,77,69,81],[96,8,70,12,"columns"],[96,15,70,19],[96,18,70,22],[96,20,70,24],[97,8,71,12,"lastEnd"],[97,15,71,19],[97,18,71,22],[97,22,71,26],[98,6,72,8],[99,6,73,8],[100,6,74,8],[100,10,74,12,"placed"],[100,16,74,18],[100,19,74,21],[100,24,74,26],[101,6,75,8],[101,11,75,13],[101,15,75,17,"i"],[101,16,75,18],[101,19,75,21],[101,20,75,22],[101,22,75,24,"i"],[101,23,75,25],[101,26,75,28,"columns"],[101,33,75,35],[101,34,75,36,"length"],[101,40,75,42],[101,42,75,44,"i"],[101,43,75,45],[101,45,75,47],[101,47,75,49],[102,8,76,12],[102,14,76,18,"col"],[102,17,76,21],[102,20,76,24,"columns"],[102,27,76,31],[102,28,76,32,"i"],[102,29,76,33],[102,30,76,34],[103,8,77,12],[103,12,77,16],[103,13,77,17,"hasCollision"],[103,25,77,29],[103,26,77,30,"col"],[103,29,77,33],[103,30,77,34,"col"],[103,33,77,37],[103,34,77,38,"length"],[103,40,77,44],[103,43,77,47],[103,44,77,48],[103,45,77,49],[103,47,77,51,"ev"],[103,49,77,53],[103,50,77,54],[103,52,77,56],[104,10,78,16,"col"],[104,13,78,19],[104,14,78,20,"push"],[104,18,78,24],[104,19,78,25,"ev"],[104,21,78,27],[104,22,78,28],[105,10,79,16,"placed"],[105,16,79,22],[105,19,79,25],[105,23,79,29],[106,10,80,16],[107,8,81,12],[108,6,82,8],[109,6,83,8],[110,6,84,8],[110,10,84,12],[110,11,84,13,"placed"],[110,17,84,19],[110,19,84,21],[111,8,85,12,"columns"],[111,15,85,19],[111,16,85,20,"push"],[111,20,85,24],[111,21,85,25],[111,22,85,26,"ev"],[111,24,85,28],[111,25,85,29],[111,26,85,30],[112,6,86,8],[113,6,87,8],[113,10,87,12,"lastEnd"],[113,17,87,19],[113,22,87,24],[113,26,87,28],[113,30,87,32,"ev"],[113,32,87,34],[113,33,87,35,"end"],[113,36,87,38],[113,39,87,41,"lastEnd"],[113,46,87,48],[113,48,87,50],[114,8,88,12,"lastEnd"],[114,15,88,19],[114,18,88,22,"ev"],[114,20,88,24],[114,21,88,25,"end"],[114,24,88,28],[115,6,89,8],[116,4,90,4],[116,5,90,5],[116,6,90,6],[117,4,91,4],[117,8,91,8,"columns"],[117,15,91,15],[117,16,91,16,"length"],[117,22,91,22],[117,25,91,25],[117,26,91,26],[117,28,91,28],[118,6,92,8,"packOverlappingEventGroup"],[118,31,92,33],[118,32,92,34,"columns"],[118,39,92,41],[118,41,92,43,"calculatedEvents"],[118,57,92,59],[118,59,92,61,"populateOptions"],[118,74,92,76],[118,75,92,77],[119,4,93,4],[120,4,94,4],[120,11,94,11,"calculatedEvents"],[120,27,94,27],[121,2,95,0],[122,2,96,7],[122,11,96,16,"buildUnavailableHoursBlocks"],[122,38,96,43,"buildUnavailableHoursBlocks"],[122,39,96,44,"unavailableHours"],[122,55,96,60],[122,58,96,63],[122,60,96,65],[122,62,96,67,"options"],[122,69,96,74],[122,71,96,76],[123,4,97,4],[123,10,97,10],[124,6,97,12,"hourBlockHeight"],[124,21,97,27],[124,24,97,30,"HOUR_BLOCK_HEIGHT"],[124,41,97,47],[125,6,97,49,"dayStart"],[125,14,97,57],[125,17,97,60],[125,18,97,61],[126,6,97,63,"dayEnd"],[126,12,97,69],[126,15,97,72],[127,4,97,75],[127,5,97,76],[127,8,97,79,"options"],[127,15,97,86],[127,19,97,90],[127,20,97,91],[127,21,97,92],[128,4,98,4],[128,10,98,10,"totalDayHours"],[128,23,98,23],[128,26,98,26,"dayEnd"],[128,32,98,32],[128,35,98,35,"dayStart"],[128,43,98,43],[129,4,99,4],[129,10,99,10,"totalDayHeight"],[129,24,99,24],[129,27,99,27],[129,28,99,28,"dayEnd"],[129,34,99,34],[129,37,99,37,"dayStart"],[129,45,99,45],[129,49,99,49,"hourBlockHeight"],[129,64,99,64],[130,4,100,4],[130,11,100,12,"unavailableHours"],[130,27,100,28],[130,28,101,9,"map"],[130,31,101,12],[130,32,101,13,"hours"],[130,37,101,18],[130,41,101,22],[131,6,102,8],[131,10,102,12],[131,11,102,13],[131,15,102,13,"inRange"],[131,22,102,20],[131,23,102,20,"default"],[131,30,102,20],[131,32,102,21,"hours"],[131,37,102,26],[131,38,102,27,"start"],[131,43,102,32],[131,45,102,34],[131,46,102,35],[131,48,102,37],[131,50,102,39],[131,51,102,40],[131,55,102,44],[131,56,102,45],[131,60,102,45,"inRange"],[131,67,102,52],[131,68,102,52,"default"],[131,75,102,52],[131,77,102,53,"hours"],[131,82,102,58],[131,83,102,59,"end"],[131,86,102,62],[131,88,102,64],[131,89,102,65],[131,91,102,67],[131,93,102,69],[131,94,102,70],[131,96,102,72],[132,8,103,12,"console"],[132,15,103,19],[132,16,103,20,"error"],[132,21,103,25],[132,22,103,26],[132,103,103,107],[132,104,103,108],[133,8,104,12],[133,15,104,19,"undefined"],[133,24,104,28],[134,6,105,8],[135,6,106,8],[135,10,106,12,"hours"],[135,15,106,17],[135,16,106,18,"start"],[135,21,106,23],[135,25,106,27,"hours"],[135,30,106,32],[135,31,106,33,"end"],[135,34,106,36],[135,36,106,38],[136,8,107,12,"console"],[136,15,107,19],[136,16,107,20,"error"],[136,21,107,25],[136,22,107,26],[136,111,107,115],[136,112,107,116],[137,8,108,12],[137,15,108,19,"undefined"],[137,24,108,28],[138,6,109,8],[139,6,110,8],[139,12,110,14,"startFixed"],[139,22,110,24],[139,25,110,27,"Math"],[139,29,110,31],[139,30,110,32,"max"],[139,33,110,35],[139,34,110,36,"hours"],[139,39,110,41],[139,40,110,42,"start"],[139,45,110,47],[139,47,110,49,"dayStart"],[139,55,110,57],[139,56,110,58],[140,6,111,8],[140,12,111,14,"endFixed"],[140,20,111,22],[140,23,111,25,"Math"],[140,27,111,29],[140,28,111,30,"min"],[140,31,111,33],[140,32,111,34,"hours"],[140,37,111,39],[140,38,111,40,"end"],[140,41,111,43],[140,43,111,45,"dayEnd"],[140,49,111,51],[140,50,111,52],[141,6,112,8],[141,13,112,15],[142,8,113,12,"top"],[142,11,113,15],[142,13,113,18],[142,14,113,19,"startFixed"],[142,24,113,29],[142,27,113,32,"dayStart"],[142,35,113,40],[142,39,113,44,"totalDayHours"],[142,52,113,57],[142,55,113,61,"totalDayHeight"],[142,69,113,75],[143,8,114,12,"height"],[143,14,114,18],[143,16,114,20],[143,17,114,21,"endFixed"],[143,25,114,29],[143,28,114,32,"startFixed"],[143,38,114,42],[143,42,114,46,"hourBlockHeight"],[144,6,115,8],[144,7,115,9],[145,4,116,4],[145,5,116,5],[146,4,117,8],[147,4,117,8],[147,5,118,9,"filter"],[147,11,118,15],[147,12,118,16,"Boolean"],[147,19,118,23],[147,20,118,24],[148,2,119,0],[149,0,119,1],[149,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;ACM;CDW;AEC;CFE;AGC;2CCI,6BD;CHO;AKC;oBCE;uBCC;SDS;KDC;CLC;OQC;aCK,wCD;cEC;KFU;mBGC;KHwB;CRK;OYC;aCK;KDe;CZG"},"hasCjsExports":false},"type":"js/module"}]}