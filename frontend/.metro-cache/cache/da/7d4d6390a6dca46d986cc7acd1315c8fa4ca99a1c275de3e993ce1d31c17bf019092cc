{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"]}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"]}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HOUR_BLOCK_HEIGHT = void 0;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  exports.populateEvents = populateEvents;\n  var _inRange = _interopRequireDefault(require(_dependencyMap[1], \"lodash/inRange\"));\n  var _xdate = _interopRequireDefault(require(_dependencyMap[2], \"xdate\"));\n  var _constants = _interopRequireDefault(require(_dependencyMap[3], \"../commons/constants\"));\n  const HOUR_BLOCK_HEIGHT = exports.HOUR_BLOCK_HEIGHT = 100;\n  const OVERLAP_EVENTS_SPACINGS = 10;\n  const RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, {\n    dayStart = 0,\n    hourBlockHeight = HOUR_BLOCK_HEIGHT\n  }) {\n    const startTime = new _xdate.default(event.start);\n    const endTime = event.end ? new _xdate.default(event.end) : new _xdate.default(startTime).addHours(1);\n    const dayStartTime = new _xdate.default(startTime).clearTime();\n    return Object.assign({}, event, {\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    });\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    let colSpan = 1;\n    for (let i = columnIndex + 1; i < columns.length; i++) {\n      const column = columns[i];\n      const foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    const {\n      screenWidth = _constants.default.screenWidth,\n      rightEdgeSpacing = RIGHT_EDGE_SPACING,\n      overlapEventsSpacing = OVERLAP_EVENTS_SPACINGS\n    } = populateOptions;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        const totalWidth = screenWidth - rightEdgeSpacing;\n        const columnSpan = calcColumnSpan(event, columnIndex, columns);\n        const eventLeft = columnIndex / columns.length * totalWidth;\n        let eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    let lastEnd = null;\n    let columns = [];\n    const calculatedEvents = [];\n    const events = _events.map((ev, index) => Object.assign({}, ev, {\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n      // Place current event in the right column where it doesn't overlap\n      let placed = false;\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks(unavailableHours = [], options) {\n    const {\n      hourBlockHeight = HOUR_BLOCK_HEIGHT,\n      dayStart = 0,\n      dayEnd = 24\n    } = options || {};\n    const totalDayHours = dayEnd - dayStart;\n    const totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, _inRange.default)(hours.start, 0, 25) || !(0, _inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      const startFixed = Math.max(hours.start, dayStart);\n      const endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":133,"map":[[9,2,1,0],[9,6,1,0,"_inRange"],[9,14,1,0],[9,17,1,0,"_interopRequireDefault"],[9,39,1,0],[9,40,1,0,"require"],[9,47,1,0],[9,48,1,0,"_dependencyMap"],[9,62,1,0],[10,2,2,0],[10,6,2,0,"_xdate"],[10,12,2,0],[10,15,2,0,"_interopRequireDefault"],[10,37,2,0],[10,38,2,0,"require"],[10,45,2,0],[10,46,2,0,"_dependencyMap"],[10,60,2,0],[11,2,3,0],[11,6,3,0,"_constants"],[11,16,3,0],[11,19,3,0,"_interopRequireDefault"],[11,41,3,0],[11,42,3,0,"require"],[11,49,3,0],[11,50,3,0,"_dependencyMap"],[11,64,3,0],[12,2,4,7],[12,8,4,13,"HOUR_BLOCK_HEIGHT"],[12,25,4,30],[12,28,4,30,"exports"],[12,35,4,30],[12,36,4,30,"HOUR_BLOCK_HEIGHT"],[12,53,4,30],[12,56,4,33],[12,59,4,36],[13,2,5,0],[13,8,5,6,"OVERLAP_EVENTS_SPACINGS"],[13,31,5,29],[13,34,5,32],[13,36,5,34],[14,2,6,0],[14,8,6,6,"RIGHT_EDGE_SPACING"],[14,26,6,24],[14,29,6,27],[14,31,6,29],[15,2,7,0],[15,11,7,9,"buildEvent"],[15,21,7,19,"buildEvent"],[15,22,7,20,"event"],[15,27,7,25],[15,29,7,27,"left"],[15,33,7,31],[15,35,7,33,"width"],[15,40,7,38],[15,42,7,40],[16,4,7,42,"dayStart"],[16,12,7,50],[16,15,7,53],[16,16,7,54],[17,4,7,56,"hourBlockHeight"],[17,19,7,71],[17,22,7,74,"HOUR_BLOCK_HEIGHT"],[18,2,7,92],[18,3,7,93],[18,5,7,95],[19,4,8,4],[19,10,8,10,"startTime"],[19,19,8,19],[19,22,8,22],[19,26,8,26,"XDate"],[19,40,8,31],[19,41,8,32,"event"],[19,46,8,37],[19,47,8,38,"start"],[19,52,8,43],[19,53,8,44],[20,4,9,4],[20,10,9,10,"endTime"],[20,17,9,17],[20,20,9,20,"event"],[20,25,9,25],[20,26,9,26,"end"],[20,29,9,29],[20,32,9,32],[20,36,9,36,"XDate"],[20,50,9,41],[20,51,9,42,"event"],[20,56,9,47],[20,57,9,48,"end"],[20,60,9,51],[20,61,9,52],[20,64,9,55],[20,68,9,59,"XDate"],[20,82,9,64],[20,83,9,65,"startTime"],[20,92,9,74],[20,93,9,75],[20,94,9,76,"addHours"],[20,102,9,84],[20,103,9,85],[20,104,9,86],[20,105,9,87],[21,4,10,4],[21,10,10,10,"dayStartTime"],[21,22,10,22],[21,25,10,25],[21,29,10,29,"XDate"],[21,43,10,34],[21,44,10,35,"startTime"],[21,53,10,44],[21,54,10,45],[21,55,10,46,"clearTime"],[21,64,10,55],[21,65,10,56],[21,66,10,57],[22,4,11,4],[22,11,11,4,"Object"],[22,17,11,4],[22,18,11,4,"assign"],[22,24,11,4],[22,29,12,11,"event"],[22,34,12,16],[23,6,13,8,"top"],[23,9,13,11],[23,11,13,13],[23,12,13,14,"dayStartTime"],[23,24,13,26],[23,25,13,27,"diffHours"],[23,34,13,36],[23,35,13,37,"startTime"],[23,44,13,46],[23,45,13,47],[23,48,13,50,"dayStart"],[23,56,13,58],[23,60,13,62,"hourBlockHeight"],[23,75,13,77],[24,6,14,8,"height"],[24,12,14,14],[24,14,14,16,"startTime"],[24,23,14,25],[24,24,14,26,"diffHours"],[24,33,14,35],[24,34,14,36,"endTime"],[24,41,14,43],[24,42,14,44],[24,45,14,47,"hourBlockHeight"],[24,60,14,62],[25,6,15,8,"width"],[25,11,15,13],[26,6,16,8,"left"],[27,4,16,12],[28,2,18,0],[29,2,19,0],[29,11,19,9,"hasCollision"],[29,23,19,21,"hasCollision"],[29,24,19,22,"a"],[29,25,19,23],[29,27,19,25,"b"],[29,28,19,26],[29,30,19,28],[30,4,20,4],[30,11,20,11,"a"],[30,12,20,12],[30,13,20,13,"end"],[30,16,20,16],[30,19,20,19,"b"],[30,20,20,20],[30,21,20,21,"start"],[30,26,20,26],[30,30,20,30,"a"],[30,31,20,31],[30,32,20,32,"start"],[30,37,20,37],[30,40,20,40,"b"],[30,41,20,41],[30,42,20,42,"end"],[30,45,20,45],[31,2,21,0],[32,2,22,0],[32,11,22,9,"calcColumnSpan"],[32,25,22,23,"calcColumnSpan"],[32,26,22,24,"event"],[32,31,22,29],[32,33,22,31,"columnIndex"],[32,44,22,42],[32,46,22,44,"columns"],[32,53,22,51],[32,55,22,53],[33,4,23,4],[33,8,23,8,"colSpan"],[33,15,23,15],[33,18,23,18],[33,19,23,19],[34,4,24,4],[34,9,24,9],[34,13,24,13,"i"],[34,14,24,14],[34,17,24,17,"columnIndex"],[34,28,24,28],[34,31,24,31],[34,32,24,32],[34,34,24,34,"i"],[34,35,24,35],[34,38,24,38,"columns"],[34,45,24,45],[34,46,24,46,"length"],[34,52,24,52],[34,54,24,54,"i"],[34,55,24,55],[34,57,24,57],[34,59,24,59],[35,6,25,8],[35,12,25,14,"column"],[35,18,25,20],[35,21,25,23,"columns"],[35,28,25,30],[35,29,25,31,"i"],[35,30,25,32],[35,31,25,33],[36,6,26,8],[36,12,26,14,"foundCollision"],[36,26,26,28],[36,29,26,31,"column"],[36,35,26,37],[36,36,26,38,"find"],[36,40,26,42],[36,41,26,43,"ev"],[36,43,26,45],[36,47,26,49,"hasCollision"],[36,59,26,61],[36,60,26,62,"event"],[36,65,26,67],[36,67,26,69,"ev"],[36,69,26,71],[36,70,26,72],[36,71,26,73],[37,6,27,8],[37,10,27,12,"foundCollision"],[37,24,27,26],[37,26,27,28],[38,8,28,12],[38,15,28,19,"colSpan"],[38,22,28,26],[39,6,29,8],[40,6,30,8,"colSpan"],[40,13,30,15],[40,15,30,17],[41,4,31,4],[42,4,32,4],[42,11,32,11,"colSpan"],[42,18,32,18],[43,2,33,0],[44,2,34,0],[44,11,34,9,"packOverlappingEventGroup"],[44,36,34,34,"packOverlappingEventGroup"],[44,37,34,35,"columns"],[44,44,34,42],[44,46,34,44,"calculatedEvents"],[44,62,34,60],[44,64,34,62,"populateOptions"],[44,79,34,77],[44,81,34,79],[45,4,35,4],[45,10,35,10],[46,6,35,12,"screenWidth"],[46,17,35,23],[46,20,35,26,"constants"],[46,38,35,35],[46,39,35,36,"screenWidth"],[46,50,35,47],[47,6,35,49,"rightEdgeSpacing"],[47,22,35,65],[47,25,35,68,"RIGHT_EDGE_SPACING"],[47,43,35,86],[48,6,35,88,"overlapEventsSpacing"],[48,26,35,108],[48,29,35,111,"OVERLAP_EVENTS_SPACINGS"],[49,4,35,135],[49,5,35,136],[49,8,35,139,"populateOptions"],[49,23,35,154],[50,4,36,4,"columns"],[50,11,36,11],[50,12,36,12,"forEach"],[50,19,36,19],[50,20,36,20],[50,21,36,21,"column"],[50,27,36,27],[50,29,36,29,"columnIndex"],[50,40,36,40],[50,45,36,45],[51,6,37,8,"column"],[51,12,37,14],[51,13,37,15,"forEach"],[51,20,37,22],[51,21,37,23,"event"],[51,26,37,28],[51,30,37,32],[52,8,38,12],[52,14,38,18,"totalWidth"],[52,24,38,28],[52,27,38,31,"screenWidth"],[52,38,38,42],[52,41,38,45,"rightEdgeSpacing"],[52,57,38,61],[53,8,39,12],[53,14,39,18,"columnSpan"],[53,24,39,28],[53,27,39,31,"calcColumnSpan"],[53,41,39,45],[53,42,39,46,"event"],[53,47,39,51],[53,49,39,53,"columnIndex"],[53,60,39,64],[53,62,39,66,"columns"],[53,69,39,73],[53,70,39,74],[54,8,40,12],[54,14,40,18,"eventLeft"],[54,23,40,27],[54,26,40,31,"columnIndex"],[54,37,40,42],[54,40,40,45,"columns"],[54,47,40,52],[54,48,40,53,"length"],[54,54,40,59],[54,57,40,63,"totalWidth"],[54,67,40,73],[55,8,41,12],[55,12,41,16,"eventWidth"],[55,22,41,26],[55,25,41,29,"totalWidth"],[55,35,41,39],[55,39,41,43,"columnSpan"],[55,49,41,53],[55,52,41,56,"columns"],[55,59,41,63],[55,60,41,64,"length"],[55,66,41,70],[55,67,41,71],[56,8,42,12],[56,12,42,16,"columnIndex"],[56,23,42,27],[56,26,42,30,"columnSpan"],[56,36,42,40],[56,40,42,44,"columns"],[56,47,42,51],[56,48,42,52,"length"],[56,54,42,58],[56,57,42,61],[56,58,42,62],[56,60,42,64],[57,10,43,16,"eventWidth"],[57,20,43,26],[57,24,43,30,"overlapEventsSpacing"],[57,44,43,50],[58,8,44,12],[59,8,45,12,"calculatedEvents"],[59,24,45,28],[59,25,45,29,"push"],[59,29,45,33],[59,30,45,34,"buildEvent"],[59,40,45,44],[59,41,45,45,"event"],[59,46,45,50],[59,48,45,52,"eventLeft"],[59,57,45,61],[59,59,45,63,"eventWidth"],[59,69,45,73],[59,71,45,75,"populateOptions"],[59,86,45,90],[59,87,45,91],[59,88,45,92],[60,6,46,8],[60,7,46,9],[60,8,46,10],[61,4,47,4],[61,5,47,5],[61,6,47,6],[62,2,48,0],[63,2,49,7],[63,11,49,16,"populateEvents"],[63,25,49,30,"populateEvents"],[63,26,49,31,"_events"],[63,33,49,38],[63,35,49,40,"populateOptions"],[63,50,49,55],[63,52,49,57],[64,4,50,4],[64,8,50,8,"lastEnd"],[64,15,50,15],[64,18,50,18],[64,22,50,22],[65,4,51,4],[65,8,51,8,"columns"],[65,15,51,15],[65,18,51,18],[65,20,51,20],[66,4,52,4],[66,10,52,10,"calculatedEvents"],[66,26,52,26],[66,29,52,29],[66,31,52,31],[67,4,53,4],[67,10,53,10,"events"],[67,16,53,16],[67,19,53,19,"_events"],[67,26,53,26],[67,27,54,9,"map"],[67,30,54,12],[67,31,54,13],[67,32,54,14,"ev"],[67,34,54,16],[67,36,54,18,"index"],[67,41,54,23],[67,46,54,23,"Object"],[67,52,54,23],[67,53,54,23,"assign"],[67,59,54,23],[67,64,54,34,"ev"],[67,66,54,36],[68,6,54,38,"index"],[68,11,54,43],[68,13,54,45,"index"],[69,4,54,50],[69,6,54,53],[69,7,54,54],[69,8,55,9,"sort"],[69,12,55,13],[69,13,55,14],[69,23,55,24,"a"],[69,24,55,25],[69,26,55,27,"b"],[69,27,55,28],[69,29,55,30],[70,6,56,8],[70,10,56,12,"a"],[70,11,56,13],[70,12,56,14,"start"],[70,17,56,19],[70,20,56,22,"b"],[70,21,56,23],[70,22,56,24,"start"],[70,27,56,29],[70,29,57,12],[70,36,57,19],[70,37,57,20],[70,38,57,21],[71,6,58,8],[71,10,58,12,"a"],[71,11,58,13],[71,12,58,14,"start"],[71,17,58,19],[71,20,58,22,"b"],[71,21,58,23],[71,22,58,24,"start"],[71,27,58,29],[71,29,59,12],[71,36,59,19],[71,37,59,20],[72,6,60,8],[72,10,60,12,"a"],[72,11,60,13],[72,12,60,14,"end"],[72,15,60,17],[72,18,60,20,"b"],[72,19,60,21],[72,20,60,22,"end"],[72,23,60,25],[72,25,61,12],[72,32,61,19],[72,33,61,20],[72,34,61,21],[73,6,62,8],[73,10,62,12,"a"],[73,11,62,13],[73,12,62,14,"end"],[73,15,62,17],[73,18,62,20,"b"],[73,19,62,21],[73,20,62,22,"end"],[73,23,62,25],[73,25,63,12],[73,32,63,19],[73,33,63,20],[74,6,64,8],[74,13,64,15],[74,14,64,16],[75,4,65,4],[75,5,65,5],[75,6,65,6],[76,4,66,4,"events"],[76,10,66,10],[76,11,66,11,"forEach"],[76,18,66,18],[76,19,66,19],[76,29,66,29,"ev"],[76,31,66,31],[76,33,66,33],[77,6,67,8],[78,6,68,8],[78,10,68,12,"lastEnd"],[78,17,68,19],[78,22,68,24],[78,26,68,28],[78,30,68,32,"ev"],[78,32,68,34],[78,33,68,35,"start"],[78,38,68,40],[78,42,68,44,"lastEnd"],[78,49,68,51],[78,51,68,53],[79,8,69,12,"packOverlappingEventGroup"],[79,33,69,37],[79,34,69,38,"columns"],[79,41,69,45],[79,43,69,47,"calculatedEvents"],[79,59,69,63],[79,61,69,65,"populateOptions"],[79,76,69,80],[79,77,69,81],[80,8,70,12,"columns"],[80,15,70,19],[80,18,70,22],[80,20,70,24],[81,8,71,12,"lastEnd"],[81,15,71,19],[81,18,71,22],[81,22,71,26],[82,6,72,8],[83,6,73,8],[84,6,74,8],[84,10,74,12,"placed"],[84,16,74,18],[84,19,74,21],[84,24,74,26],[85,6,75,8],[85,11,75,13],[85,15,75,17,"i"],[85,16,75,18],[85,19,75,21],[85,20,75,22],[85,22,75,24,"i"],[85,23,75,25],[85,26,75,28,"columns"],[85,33,75,35],[85,34,75,36,"length"],[85,40,75,42],[85,42,75,44,"i"],[85,43,75,45],[85,45,75,47],[85,47,75,49],[86,8,76,12],[86,14,76,18,"col"],[86,17,76,21],[86,20,76,24,"columns"],[86,27,76,31],[86,28,76,32,"i"],[86,29,76,33],[86,30,76,34],[87,8,77,12],[87,12,77,16],[87,13,77,17,"hasCollision"],[87,25,77,29],[87,26,77,30,"col"],[87,29,77,33],[87,30,77,34,"col"],[87,33,77,37],[87,34,77,38,"length"],[87,40,77,44],[87,43,77,47],[87,44,77,48],[87,45,77,49],[87,47,77,51,"ev"],[87,49,77,53],[87,50,77,54],[87,52,77,56],[88,10,78,16,"col"],[88,13,78,19],[88,14,78,20,"push"],[88,18,78,24],[88,19,78,25,"ev"],[88,21,78,27],[88,22,78,28],[89,10,79,16,"placed"],[89,16,79,22],[89,19,79,25],[89,23,79,29],[90,10,80,16],[91,8,81,12],[92,6,82,8],[93,6,83,8],[94,6,84,8],[94,10,84,12],[94,11,84,13,"placed"],[94,17,84,19],[94,19,84,21],[95,8,85,12,"columns"],[95,15,85,19],[95,16,85,20,"push"],[95,20,85,24],[95,21,85,25],[95,22,85,26,"ev"],[95,24,85,28],[95,25,85,29],[95,26,85,30],[96,6,86,8],[97,6,87,8],[97,10,87,12,"lastEnd"],[97,17,87,19],[97,22,87,24],[97,26,87,28],[97,30,87,32,"ev"],[97,32,87,34],[97,33,87,35,"end"],[97,36,87,38],[97,39,87,41,"lastEnd"],[97,46,87,48],[97,48,87,50],[98,8,88,12,"lastEnd"],[98,15,88,19],[98,18,88,22,"ev"],[98,20,88,24],[98,21,88,25,"end"],[98,24,88,28],[99,6,89,8],[100,4,90,4],[100,5,90,5],[100,6,90,6],[101,4,91,4],[101,8,91,8,"columns"],[101,15,91,15],[101,16,91,16,"length"],[101,22,91,22],[101,25,91,25],[101,26,91,26],[101,28,91,28],[102,6,92,8,"packOverlappingEventGroup"],[102,31,92,33],[102,32,92,34,"columns"],[102,39,92,41],[102,41,92,43,"calculatedEvents"],[102,57,92,59],[102,59,92,61,"populateOptions"],[102,74,92,76],[102,75,92,77],[103,4,93,4],[104,4,94,4],[104,11,94,11,"calculatedEvents"],[104,27,94,27],[105,2,95,0],[106,2,96,7],[106,11,96,16,"buildUnavailableHoursBlocks"],[106,38,96,43,"buildUnavailableHoursBlocks"],[106,39,96,44,"unavailableHours"],[106,55,96,60],[106,58,96,63],[106,60,96,65],[106,62,96,67,"options"],[106,69,96,74],[106,71,96,76],[107,4,97,4],[107,10,97,10],[108,6,97,12,"hourBlockHeight"],[108,21,97,27],[108,24,97,30,"HOUR_BLOCK_HEIGHT"],[108,41,97,47],[109,6,97,49,"dayStart"],[109,14,97,57],[109,17,97,60],[109,18,97,61],[110,6,97,63,"dayEnd"],[110,12,97,69],[110,15,97,72],[111,4,97,75],[111,5,97,76],[111,8,97,79,"options"],[111,15,97,86],[111,19,97,90],[111,20,97,91],[111,21,97,92],[112,4,98,4],[112,10,98,10,"totalDayHours"],[112,23,98,23],[112,26,98,26,"dayEnd"],[112,32,98,32],[112,35,98,35,"dayStart"],[112,43,98,43],[113,4,99,4],[113,10,99,10,"totalDayHeight"],[113,24,99,24],[113,27,99,27],[113,28,99,28,"dayEnd"],[113,34,99,34],[113,37,99,37,"dayStart"],[113,45,99,45],[113,49,99,49,"hourBlockHeight"],[113,64,99,64],[114,4,100,4],[114,11,100,12,"unavailableHours"],[114,27,100,28],[114,28,101,9,"map"],[114,31,101,12],[114,32,101,13,"hours"],[114,37,101,18],[114,41,101,22],[115,6,102,8],[115,10,102,12],[115,11,102,13],[115,15,102,13,"inRange"],[115,31,102,20],[115,33,102,21,"hours"],[115,38,102,26],[115,39,102,27,"start"],[115,44,102,32],[115,46,102,34],[115,47,102,35],[115,49,102,37],[115,51,102,39],[115,52,102,40],[115,56,102,44],[115,57,102,45],[115,61,102,45,"inRange"],[115,77,102,52],[115,79,102,53,"hours"],[115,84,102,58],[115,85,102,59,"end"],[115,88,102,62],[115,90,102,64],[115,91,102,65],[115,93,102,67],[115,95,102,69],[115,96,102,70],[115,98,102,72],[116,8,103,12,"console"],[116,15,103,19],[116,16,103,20,"error"],[116,21,103,25],[116,22,103,26],[116,103,103,107],[116,104,103,108],[117,8,104,12],[117,15,104,19,"undefined"],[117,24,104,28],[118,6,105,8],[119,6,106,8],[119,10,106,12,"hours"],[119,15,106,17],[119,16,106,18,"start"],[119,21,106,23],[119,25,106,27,"hours"],[119,30,106,32],[119,31,106,33,"end"],[119,34,106,36],[119,36,106,38],[120,8,107,12,"console"],[120,15,107,19],[120,16,107,20,"error"],[120,21,107,25],[120,22,107,26],[120,111,107,115],[120,112,107,116],[121,8,108,12],[121,15,108,19,"undefined"],[121,24,108,28],[122,6,109,8],[123,6,110,8],[123,12,110,14,"startFixed"],[123,22,110,24],[123,25,110,27,"Math"],[123,29,110,31],[123,30,110,32,"max"],[123,33,110,35],[123,34,110,36,"hours"],[123,39,110,41],[123,40,110,42,"start"],[123,45,110,47],[123,47,110,49,"dayStart"],[123,55,110,57],[123,56,110,58],[124,6,111,8],[124,12,111,14,"endFixed"],[124,20,111,22],[124,23,111,25,"Math"],[124,27,111,29],[124,28,111,30,"min"],[124,31,111,33],[124,32,111,34,"hours"],[124,37,111,39],[124,38,111,40,"end"],[124,41,111,43],[124,43,111,45,"dayEnd"],[124,49,111,51],[124,50,111,52],[125,6,112,8],[125,13,112,15],[126,8,113,12,"top"],[126,11,113,15],[126,13,113,18],[126,14,113,19,"startFixed"],[126,24,113,29],[126,27,113,32,"dayStart"],[126,35,113,40],[126,39,113,44,"totalDayHours"],[126,52,113,57],[126,55,113,61,"totalDayHeight"],[126,69,113,75],[127,8,114,12,"height"],[127,14,114,18],[127,16,114,20],[127,17,114,21,"endFixed"],[127,25,114,29],[127,28,114,32,"startFixed"],[127,38,114,42],[127,42,114,46,"hourBlockHeight"],[128,6,115,8],[128,7,115,9],[129,4,116,4],[129,5,116,5],[130,4,117,8],[131,4,117,8],[131,5,118,9,"filter"],[131,11,118,15],[131,12,118,16,"Boolean"],[131,19,118,23],[131,20,118,24],[132,2,119,0],[133,0,119,1],[133,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;ACM;CDW;AEC;CFE;AGC;2CCI,6BD;CHO;AKC;oBCE;uBCC;SDS;KDC;CLC;OQC;aCK,wCD;cEC;KFU;mBGC;KHwB;CRK;OYC;aCK;KDe;CZG"}},"type":"js/module"}]}