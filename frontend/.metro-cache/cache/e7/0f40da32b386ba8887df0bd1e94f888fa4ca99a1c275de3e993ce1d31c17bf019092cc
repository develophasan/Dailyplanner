{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"lodash/inRange","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"X+kokBLlLFiZJmpT6+r9ZmROeos=","exportNames":["*"]}},{"name":"xdate","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"gTa7eBSzdZCpR7C6CXaJhVpu6vY=","exportNames":["*"]}},{"name":"../commons/constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"SMwBhX4ALvbYIiiSbn97/4tbxzQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HOUR_BLOCK_HEIGHT = void 0;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  exports.populateEvents = populateEvents;\n  var _inRange = _interopRequireDefault(require(_dependencyMap[1], \"lodash/inRange\"));\n  var _xdate = _interopRequireDefault(require(_dependencyMap[2], \"xdate\"));\n  var _constants = _interopRequireDefault(require(_dependencyMap[3], \"../commons/constants\"));\n  const HOUR_BLOCK_HEIGHT = exports.HOUR_BLOCK_HEIGHT = 100;\n  const OVERLAP_EVENTS_SPACINGS = 10;\n  const RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, {\n    dayStart = 0,\n    hourBlockHeight = HOUR_BLOCK_HEIGHT\n  }) {\n    const startTime = new _xdate.default(event.start);\n    const endTime = event.end ? new _xdate.default(event.end) : new _xdate.default(startTime).addHours(1);\n    const dayStartTime = new _xdate.default(startTime).clearTime();\n    return {\n      ...event,\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width,\n      left\n    };\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    let colSpan = 1;\n    for (let i = columnIndex + 1; i < columns.length; i++) {\n      const column = columns[i];\n      const foundCollision = column.find(ev => hasCollision(event, ev));\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    const {\n      screenWidth = _constants.default.screenWidth,\n      rightEdgeSpacing = RIGHT_EDGE_SPACING,\n      overlapEventsSpacing = OVERLAP_EVENTS_SPACINGS\n    } = populateOptions;\n    columns.forEach((column, columnIndex) => {\n      column.forEach(event => {\n        const totalWidth = screenWidth - rightEdgeSpacing;\n        const columnSpan = calcColumnSpan(event, columnIndex, columns);\n        const eventLeft = columnIndex / columns.length * totalWidth;\n        let eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    let lastEnd = null;\n    let columns = [];\n    const calculatedEvents = [];\n    const events = _events.map((ev, index) => ({\n      ...ev,\n      index: index\n    })).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n      // Place current event in the right column where it doesn't overlap\n      let placed = false;\n      for (let i = 0; i < columns.length; i++) {\n        const col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks(unavailableHours = [], options) {\n    const {\n      hourBlockHeight = HOUR_BLOCK_HEIGHT,\n      dayStart = 0,\n      dayEnd = 24\n    } = options || {};\n    const totalDayHours = dayEnd - dayStart;\n    const totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(hours => {\n      if (!(0, _inRange.default)(hours.start, 0, 25) || !(0, _inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      const startFixed = Math.max(hours.start, dayStart);\n      const endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":135,"map":[[9,2,1,0],[9,6,1,0,"_inRange"],[9,14,1,0],[9,17,1,0,"_interopRequireDefault"],[9,39,1,0],[9,40,1,0,"require"],[9,47,1,0],[9,48,1,0,"_dependencyMap"],[9,62,1,0],[10,2,2,0],[10,6,2,0,"_xdate"],[10,12,2,0],[10,15,2,0,"_interopRequireDefault"],[10,37,2,0],[10,38,2,0,"require"],[10,45,2,0],[10,46,2,0,"_dependencyMap"],[10,60,2,0],[11,2,3,0],[11,6,3,0,"_constants"],[11,16,3,0],[11,19,3,0,"_interopRequireDefault"],[11,41,3,0],[11,42,3,0,"require"],[11,49,3,0],[11,50,3,0,"_dependencyMap"],[11,64,3,0],[12,2,4,7],[12,8,4,13,"HOUR_BLOCK_HEIGHT"],[12,25,4,30],[12,28,4,30,"exports"],[12,35,4,30],[12,36,4,30,"HOUR_BLOCK_HEIGHT"],[12,53,4,30],[12,56,4,33],[12,59,4,36],[13,2,5,0],[13,8,5,6,"OVERLAP_EVENTS_SPACINGS"],[13,31,5,29],[13,34,5,32],[13,36,5,34],[14,2,6,0],[14,8,6,6,"RIGHT_EDGE_SPACING"],[14,26,6,24],[14,29,6,27],[14,31,6,29],[15,2,7,0],[15,11,7,9,"buildEvent"],[15,21,7,19,"buildEvent"],[15,22,7,20,"event"],[15,27,7,25],[15,29,7,27,"left"],[15,33,7,31],[15,35,7,33,"width"],[15,40,7,38],[15,42,7,40],[16,4,7,42,"dayStart"],[16,12,7,50],[16,15,7,53],[16,16,7,54],[17,4,7,56,"hourBlockHeight"],[17,19,7,71],[17,22,7,74,"HOUR_BLOCK_HEIGHT"],[18,2,7,92],[18,3,7,93],[18,5,7,95],[19,4,8,4],[19,10,8,10,"startTime"],[19,19,8,19],[19,22,8,22],[19,26,8,26,"XDate"],[19,40,8,31],[19,41,8,32,"event"],[19,46,8,37],[19,47,8,38,"start"],[19,52,8,43],[19,53,8,44],[20,4,9,4],[20,10,9,10,"endTime"],[20,17,9,17],[20,20,9,20,"event"],[20,25,9,25],[20,26,9,26,"end"],[20,29,9,29],[20,32,9,32],[20,36,9,36,"XDate"],[20,50,9,41],[20,51,9,42,"event"],[20,56,9,47],[20,57,9,48,"end"],[20,60,9,51],[20,61,9,52],[20,64,9,55],[20,68,9,59,"XDate"],[20,82,9,64],[20,83,9,65,"startTime"],[20,92,9,74],[20,93,9,75],[20,94,9,76,"addHours"],[20,102,9,84],[20,103,9,85],[20,104,9,86],[20,105,9,87],[21,4,10,4],[21,10,10,10,"dayStartTime"],[21,22,10,22],[21,25,10,25],[21,29,10,29,"XDate"],[21,43,10,34],[21,44,10,35,"startTime"],[21,53,10,44],[21,54,10,45],[21,55,10,46,"clearTime"],[21,64,10,55],[21,65,10,56],[21,66,10,57],[22,4,11,4],[22,11,11,11],[23,6,12,8],[23,9,12,11,"event"],[23,14,12,16],[24,6,13,8,"top"],[24,9,13,11],[24,11,13,13],[24,12,13,14,"dayStartTime"],[24,24,13,26],[24,25,13,27,"diffHours"],[24,34,13,36],[24,35,13,37,"startTime"],[24,44,13,46],[24,45,13,47],[24,48,13,50,"dayStart"],[24,56,13,58],[24,60,13,62,"hourBlockHeight"],[24,75,13,77],[25,6,14,8,"height"],[25,12,14,14],[25,14,14,16,"startTime"],[25,23,14,25],[25,24,14,26,"diffHours"],[25,33,14,35],[25,34,14,36,"endTime"],[25,41,14,43],[25,42,14,44],[25,45,14,47,"hourBlockHeight"],[25,60,14,62],[26,6,15,8,"width"],[26,11,15,13],[27,6,16,8,"left"],[28,4,17,4],[28,5,17,5],[29,2,18,0],[30,2,19,0],[30,11,19,9,"hasCollision"],[30,23,19,21,"hasCollision"],[30,24,19,22,"a"],[30,25,19,23],[30,27,19,25,"b"],[30,28,19,26],[30,30,19,28],[31,4,20,4],[31,11,20,11,"a"],[31,12,20,12],[31,13,20,13,"end"],[31,16,20,16],[31,19,20,19,"b"],[31,20,20,20],[31,21,20,21,"start"],[31,26,20,26],[31,30,20,30,"a"],[31,31,20,31],[31,32,20,32,"start"],[31,37,20,37],[31,40,20,40,"b"],[31,41,20,41],[31,42,20,42,"end"],[31,45,20,45],[32,2,21,0],[33,2,22,0],[33,11,22,9,"calcColumnSpan"],[33,25,22,23,"calcColumnSpan"],[33,26,22,24,"event"],[33,31,22,29],[33,33,22,31,"columnIndex"],[33,44,22,42],[33,46,22,44,"columns"],[33,53,22,51],[33,55,22,53],[34,4,23,4],[34,8,23,8,"colSpan"],[34,15,23,15],[34,18,23,18],[34,19,23,19],[35,4,24,4],[35,9,24,9],[35,13,24,13,"i"],[35,14,24,14],[35,17,24,17,"columnIndex"],[35,28,24,28],[35,31,24,31],[35,32,24,32],[35,34,24,34,"i"],[35,35,24,35],[35,38,24,38,"columns"],[35,45,24,45],[35,46,24,46,"length"],[35,52,24,52],[35,54,24,54,"i"],[35,55,24,55],[35,57,24,57],[35,59,24,59],[36,6,25,8],[36,12,25,14,"column"],[36,18,25,20],[36,21,25,23,"columns"],[36,28,25,30],[36,29,25,31,"i"],[36,30,25,32],[36,31,25,33],[37,6,26,8],[37,12,26,14,"foundCollision"],[37,26,26,28],[37,29,26,31,"column"],[37,35,26,37],[37,36,26,38,"find"],[37,40,26,42],[37,41,26,43,"ev"],[37,43,26,45],[37,47,26,49,"hasCollision"],[37,59,26,61],[37,60,26,62,"event"],[37,65,26,67],[37,67,26,69,"ev"],[37,69,26,71],[37,70,26,72],[37,71,26,73],[38,6,27,8],[38,10,27,12,"foundCollision"],[38,24,27,26],[38,26,27,28],[39,8,28,12],[39,15,28,19,"colSpan"],[39,22,28,26],[40,6,29,8],[41,6,30,8,"colSpan"],[41,13,30,15],[41,15,30,17],[42,4,31,4],[43,4,32,4],[43,11,32,11,"colSpan"],[43,18,32,18],[44,2,33,0],[45,2,34,0],[45,11,34,9,"packOverlappingEventGroup"],[45,36,34,34,"packOverlappingEventGroup"],[45,37,34,35,"columns"],[45,44,34,42],[45,46,34,44,"calculatedEvents"],[45,62,34,60],[45,64,34,62,"populateOptions"],[45,79,34,77],[45,81,34,79],[46,4,35,4],[46,10,35,10],[47,6,35,12,"screenWidth"],[47,17,35,23],[47,20,35,26,"constants"],[47,38,35,35],[47,39,35,36,"screenWidth"],[47,50,35,47],[48,6,35,49,"rightEdgeSpacing"],[48,22,35,65],[48,25,35,68,"RIGHT_EDGE_SPACING"],[48,43,35,86],[49,6,35,88,"overlapEventsSpacing"],[49,26,35,108],[49,29,35,111,"OVERLAP_EVENTS_SPACINGS"],[50,4,35,135],[50,5,35,136],[50,8,35,139,"populateOptions"],[50,23,35,154],[51,4,36,4,"columns"],[51,11,36,11],[51,12,36,12,"forEach"],[51,19,36,19],[51,20,36,20],[51,21,36,21,"column"],[51,27,36,27],[51,29,36,29,"columnIndex"],[51,40,36,40],[51,45,36,45],[52,6,37,8,"column"],[52,12,37,14],[52,13,37,15,"forEach"],[52,20,37,22],[52,21,37,23,"event"],[52,26,37,28],[52,30,37,32],[53,8,38,12],[53,14,38,18,"totalWidth"],[53,24,38,28],[53,27,38,31,"screenWidth"],[53,38,38,42],[53,41,38,45,"rightEdgeSpacing"],[53,57,38,61],[54,8,39,12],[54,14,39,18,"columnSpan"],[54,24,39,28],[54,27,39,31,"calcColumnSpan"],[54,41,39,45],[54,42,39,46,"event"],[54,47,39,51],[54,49,39,53,"columnIndex"],[54,60,39,64],[54,62,39,66,"columns"],[54,69,39,73],[54,70,39,74],[55,8,40,12],[55,14,40,18,"eventLeft"],[55,23,40,27],[55,26,40,31,"columnIndex"],[55,37,40,42],[55,40,40,45,"columns"],[55,47,40,52],[55,48,40,53,"length"],[55,54,40,59],[55,57,40,63,"totalWidth"],[55,67,40,73],[56,8,41,12],[56,12,41,16,"eventWidth"],[56,22,41,26],[56,25,41,29,"totalWidth"],[56,35,41,39],[56,39,41,43,"columnSpan"],[56,49,41,53],[56,52,41,56,"columns"],[56,59,41,63],[56,60,41,64,"length"],[56,66,41,70],[56,67,41,71],[57,8,42,12],[57,12,42,16,"columnIndex"],[57,23,42,27],[57,26,42,30,"columnSpan"],[57,36,42,40],[57,40,42,44,"columns"],[57,47,42,51],[57,48,42,52,"length"],[57,54,42,58],[57,57,42,61],[57,58,42,62],[57,60,42,64],[58,10,43,16,"eventWidth"],[58,20,43,26],[58,24,43,30,"overlapEventsSpacing"],[58,44,43,50],[59,8,44,12],[60,8,45,12,"calculatedEvents"],[60,24,45,28],[60,25,45,29,"push"],[60,29,45,33],[60,30,45,34,"buildEvent"],[60,40,45,44],[60,41,45,45,"event"],[60,46,45,50],[60,48,45,52,"eventLeft"],[60,57,45,61],[60,59,45,63,"eventWidth"],[60,69,45,73],[60,71,45,75,"populateOptions"],[60,86,45,90],[60,87,45,91],[60,88,45,92],[61,6,46,8],[61,7,46,9],[61,8,46,10],[62,4,47,4],[62,5,47,5],[62,6,47,6],[63,2,48,0],[64,2,49,7],[64,11,49,16,"populateEvents"],[64,25,49,30,"populateEvents"],[64,26,49,31,"_events"],[64,33,49,38],[64,35,49,40,"populateOptions"],[64,50,49,55],[64,52,49,57],[65,4,50,4],[65,8,50,8,"lastEnd"],[65,15,50,15],[65,18,50,18],[65,22,50,22],[66,4,51,4],[66,8,51,8,"columns"],[66,15,51,15],[66,18,51,18],[66,20,51,20],[67,4,52,4],[67,10,52,10,"calculatedEvents"],[67,26,52,26],[67,29,52,29],[67,31,52,31],[68,4,53,4],[68,10,53,10,"events"],[68,16,53,16],[68,19,53,19,"_events"],[68,26,53,26],[68,27,54,9,"map"],[68,30,54,12],[68,31,54,13],[68,32,54,14,"ev"],[68,34,54,16],[68,36,54,18,"index"],[68,41,54,23],[68,47,54,29],[69,6,54,31],[69,9,54,34,"ev"],[69,11,54,36],[70,6,54,38,"index"],[70,11,54,43],[70,13,54,45,"index"],[71,4,54,51],[71,5,54,52],[71,6,54,53],[71,7,54,54],[71,8,55,9,"sort"],[71,12,55,13],[71,13,55,14],[71,23,55,24,"a"],[71,24,55,25],[71,26,55,27,"b"],[71,27,55,28],[71,29,55,30],[72,6,56,8],[72,10,56,12,"a"],[72,11,56,13],[72,12,56,14,"start"],[72,17,56,19],[72,20,56,22,"b"],[72,21,56,23],[72,22,56,24,"start"],[72,27,56,29],[72,29,57,12],[72,36,57,19],[72,37,57,20],[72,38,57,21],[73,6,58,8],[73,10,58,12,"a"],[73,11,58,13],[73,12,58,14,"start"],[73,17,58,19],[73,20,58,22,"b"],[73,21,58,23],[73,22,58,24,"start"],[73,27,58,29],[73,29,59,12],[73,36,59,19],[73,37,59,20],[74,6,60,8],[74,10,60,12,"a"],[74,11,60,13],[74,12,60,14,"end"],[74,15,60,17],[74,18,60,20,"b"],[74,19,60,21],[74,20,60,22,"end"],[74,23,60,25],[74,25,61,12],[74,32,61,19],[74,33,61,20],[74,34,61,21],[75,6,62,8],[75,10,62,12,"a"],[75,11,62,13],[75,12,62,14,"end"],[75,15,62,17],[75,18,62,20,"b"],[75,19,62,21],[75,20,62,22,"end"],[75,23,62,25],[75,25,63,12],[75,32,63,19],[75,33,63,20],[76,6,64,8],[76,13,64,15],[76,14,64,16],[77,4,65,4],[77,5,65,5],[77,6,65,6],[78,4,66,4,"events"],[78,10,66,10],[78,11,66,11,"forEach"],[78,18,66,18],[78,19,66,19],[78,29,66,29,"ev"],[78,31,66,31],[78,33,66,33],[79,6,67,8],[80,6,68,8],[80,10,68,12,"lastEnd"],[80,17,68,19],[80,22,68,24],[80,26,68,28],[80,30,68,32,"ev"],[80,32,68,34],[80,33,68,35,"start"],[80,38,68,40],[80,42,68,44,"lastEnd"],[80,49,68,51],[80,51,68,53],[81,8,69,12,"packOverlappingEventGroup"],[81,33,69,37],[81,34,69,38,"columns"],[81,41,69,45],[81,43,69,47,"calculatedEvents"],[81,59,69,63],[81,61,69,65,"populateOptions"],[81,76,69,80],[81,77,69,81],[82,8,70,12,"columns"],[82,15,70,19],[82,18,70,22],[82,20,70,24],[83,8,71,12,"lastEnd"],[83,15,71,19],[83,18,71,22],[83,22,71,26],[84,6,72,8],[85,6,73,8],[86,6,74,8],[86,10,74,12,"placed"],[86,16,74,18],[86,19,74,21],[86,24,74,26],[87,6,75,8],[87,11,75,13],[87,15,75,17,"i"],[87,16,75,18],[87,19,75,21],[87,20,75,22],[87,22,75,24,"i"],[87,23,75,25],[87,26,75,28,"columns"],[87,33,75,35],[87,34,75,36,"length"],[87,40,75,42],[87,42,75,44,"i"],[87,43,75,45],[87,45,75,47],[87,47,75,49],[88,8,76,12],[88,14,76,18,"col"],[88,17,76,21],[88,20,76,24,"columns"],[88,27,76,31],[88,28,76,32,"i"],[88,29,76,33],[88,30,76,34],[89,8,77,12],[89,12,77,16],[89,13,77,17,"hasCollision"],[89,25,77,29],[89,26,77,30,"col"],[89,29,77,33],[89,30,77,34,"col"],[89,33,77,37],[89,34,77,38,"length"],[89,40,77,44],[89,43,77,47],[89,44,77,48],[89,45,77,49],[89,47,77,51,"ev"],[89,49,77,53],[89,50,77,54],[89,52,77,56],[90,10,78,16,"col"],[90,13,78,19],[90,14,78,20,"push"],[90,18,78,24],[90,19,78,25,"ev"],[90,21,78,27],[90,22,78,28],[91,10,79,16,"placed"],[91,16,79,22],[91,19,79,25],[91,23,79,29],[92,10,80,16],[93,8,81,12],[94,6,82,8],[95,6,83,8],[96,6,84,8],[96,10,84,12],[96,11,84,13,"placed"],[96,17,84,19],[96,19,84,21],[97,8,85,12,"columns"],[97,15,85,19],[97,16,85,20,"push"],[97,20,85,24],[97,21,85,25],[97,22,85,26,"ev"],[97,24,85,28],[97,25,85,29],[97,26,85,30],[98,6,86,8],[99,6,87,8],[99,10,87,12,"lastEnd"],[99,17,87,19],[99,22,87,24],[99,26,87,28],[99,30,87,32,"ev"],[99,32,87,34],[99,33,87,35,"end"],[99,36,87,38],[99,39,87,41,"lastEnd"],[99,46,87,48],[99,48,87,50],[100,8,88,12,"lastEnd"],[100,15,88,19],[100,18,88,22,"ev"],[100,20,88,24],[100,21,88,25,"end"],[100,24,88,28],[101,6,89,8],[102,4,90,4],[102,5,90,5],[102,6,90,6],[103,4,91,4],[103,8,91,8,"columns"],[103,15,91,15],[103,16,91,16,"length"],[103,22,91,22],[103,25,91,25],[103,26,91,26],[103,28,91,28],[104,6,92,8,"packOverlappingEventGroup"],[104,31,92,33],[104,32,92,34,"columns"],[104,39,92,41],[104,41,92,43,"calculatedEvents"],[104,57,92,59],[104,59,92,61,"populateOptions"],[104,74,92,76],[104,75,92,77],[105,4,93,4],[106,4,94,4],[106,11,94,11,"calculatedEvents"],[106,27,94,27],[107,2,95,0],[108,2,96,7],[108,11,96,16,"buildUnavailableHoursBlocks"],[108,38,96,43,"buildUnavailableHoursBlocks"],[108,39,96,44,"unavailableHours"],[108,55,96,60],[108,58,96,63],[108,60,96,65],[108,62,96,67,"options"],[108,69,96,74],[108,71,96,76],[109,4,97,4],[109,10,97,10],[110,6,97,12,"hourBlockHeight"],[110,21,97,27],[110,24,97,30,"HOUR_BLOCK_HEIGHT"],[110,41,97,47],[111,6,97,49,"dayStart"],[111,14,97,57],[111,17,97,60],[111,18,97,61],[112,6,97,63,"dayEnd"],[112,12,97,69],[112,15,97,72],[113,4,97,75],[113,5,97,76],[113,8,97,79,"options"],[113,15,97,86],[113,19,97,90],[113,20,97,91],[113,21,97,92],[114,4,98,4],[114,10,98,10,"totalDayHours"],[114,23,98,23],[114,26,98,26,"dayEnd"],[114,32,98,32],[114,35,98,35,"dayStart"],[114,43,98,43],[115,4,99,4],[115,10,99,10,"totalDayHeight"],[115,24,99,24],[115,27,99,27],[115,28,99,28,"dayEnd"],[115,34,99,34],[115,37,99,37,"dayStart"],[115,45,99,45],[115,49,99,49,"hourBlockHeight"],[115,64,99,64],[116,4,100,4],[116,11,100,12,"unavailableHours"],[116,27,100,28],[116,28,101,9,"map"],[116,31,101,12],[116,32,101,13,"hours"],[116,37,101,18],[116,41,101,22],[117,6,102,8],[117,10,102,12],[117,11,102,13],[117,15,102,13,"inRange"],[117,31,102,20],[117,33,102,21,"hours"],[117,38,102,26],[117,39,102,27,"start"],[117,44,102,32],[117,46,102,34],[117,47,102,35],[117,49,102,37],[117,51,102,39],[117,52,102,40],[117,56,102,44],[117,57,102,45],[117,61,102,45,"inRange"],[117,77,102,52],[117,79,102,53,"hours"],[117,84,102,58],[117,85,102,59,"end"],[117,88,102,62],[117,90,102,64],[117,91,102,65],[117,93,102,67],[117,95,102,69],[117,96,102,70],[117,98,102,72],[118,8,103,12,"console"],[118,15,103,19],[118,16,103,20,"error"],[118,21,103,25],[118,22,103,26],[118,103,103,107],[118,104,103,108],[119,8,104,12],[119,15,104,19,"undefined"],[119,24,104,28],[120,6,105,8],[121,6,106,8],[121,10,106,12,"hours"],[121,15,106,17],[121,16,106,18,"start"],[121,21,106,23],[121,25,106,27,"hours"],[121,30,106,32],[121,31,106,33,"end"],[121,34,106,36],[121,36,106,38],[122,8,107,12,"console"],[122,15,107,19],[122,16,107,20,"error"],[122,21,107,25],[122,22,107,26],[122,111,107,115],[122,112,107,116],[123,8,108,12],[123,15,108,19,"undefined"],[123,24,108,28],[124,6,109,8],[125,6,110,8],[125,12,110,14,"startFixed"],[125,22,110,24],[125,25,110,27,"Math"],[125,29,110,31],[125,30,110,32,"max"],[125,33,110,35],[125,34,110,36,"hours"],[125,39,110,41],[125,40,110,42,"start"],[125,45,110,47],[125,47,110,49,"dayStart"],[125,55,110,57],[125,56,110,58],[126,6,111,8],[126,12,111,14,"endFixed"],[126,20,111,22],[126,23,111,25,"Math"],[126,27,111,29],[126,28,111,30,"min"],[126,31,111,33],[126,32,111,34,"hours"],[126,37,111,39],[126,38,111,40,"end"],[126,41,111,43],[126,43,111,45,"dayEnd"],[126,49,111,51],[126,50,111,52],[127,6,112,8],[127,13,112,15],[128,8,113,12,"top"],[128,11,113,15],[128,13,113,18],[128,14,113,19,"startFixed"],[128,24,113,29],[128,27,113,32,"dayStart"],[128,35,113,40],[128,39,113,44,"totalDayHours"],[128,52,113,57],[128,55,113,61,"totalDayHeight"],[128,69,113,75],[129,8,114,12,"height"],[129,14,114,18],[129,16,114,20],[129,17,114,21,"endFixed"],[129,25,114,29],[129,28,114,32,"startFixed"],[129,38,114,42],[129,42,114,46,"hourBlockHeight"],[130,6,115,8],[130,7,115,9],[131,4,116,4],[131,5,116,5],[132,4,117,8],[133,4,117,8],[133,5,118,9,"filter"],[133,11,118,15],[133,12,118,16,"Boolean"],[133,19,118,23],[133,20,118,24],[134,2,119,0],[135,0,119,1],[135,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;ACM;CDW;AEC;CFE;AGC;2CCI,6BD;CHO;AKC;oBCE;uBCC;SDS;KDC;CLC;OQC;aCK,wCD;cEC;KFU;mBGC;KHwB;CRK;OYC;aCK;KDe;CZG"}},"type":"js/module"}]}